<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WSL2 中 Systemd 处于降级状态的原因分析及解决方案</title>
      <link href="/Analysis-Of-The-Causes-And-Solutions-Of-Systemd-In-Degraded-State-In-WSL2/"/>
      <url>/Analysis-Of-The-Causes-And-Solutions-Of-Systemd-In-Degraded-State-In-WSL2/</url>
      
        <content type="html"><![CDATA[<p>WSL2 现已官方支持 Systemd，可实际上手体验后发现 WSL2 中 Systemd 处于降级状态。本文将分析 WSL2 中 Systemd 处于降级状态的原因并附上解决方案。</p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>2022年11月22日，Microsoft 终于宣布 <a href="https://devblogs.microsoft.com/commandline/the-windows-subsystem-for-linux-in-the-microsoft-store-is-now-generally-available-on-windows-10-and-11/">WSL 脱离预览阶段</a>并带来了人们翘首以盼的 <a href="https://devblogs.microsoft.com/commandline/systemd-support-is-now-available-in-wsl/">Systemd 官方支持</a>。</p><p>然而实际上手体验后，我发现 WSL2 中 Systemd 处于降级状态，希望 Microsoft 尽快修复此 BUG。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> systemctl status● Anonimowy    State: degraded     Jobs: <span class="token number">0</span> queued   Failed: <span class="token number">1</span> <span class="token function">units</span></code></pre><p>接下来，本文将分析问题原因并附上解决方案。</p><h2 id="问题何在？"><a href="#问题何在？" class="headerlink" title="问题何在？"></a>问题何在？</h2><p>首先，我们找出导致 Systemd 进入降级状态的罪魁祸首：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> systemctl <span class="token parameter variable">--failed</span>  UNIT                     LOAD   ACTIVE SUB    DESCRIPTION● systemd-sysusers.service loaded failed failed Create System UsersLOAD   <span class="token operator">=</span> Reflects whether the unit definition was properly loaded.ACTIVE <span class="token operator">=</span> The high-level unit activation state, i.e. generalization of SUB.SUB    <span class="token operator">=</span> The low-level unit activation state, values depend on unit type.<span class="token number">1</span> loaded <span class="token function">units</span> listed.</code></pre><p>显而易见的，<code>systemd-sysusers.service</code> 启动失败导致了 Systemd 降级。</p><p>查看 <code>systemd-sysusers.service</code> 错误日志：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> journalctl <span class="token parameter variable">--boot</span> <span class="token parameter variable">-u</span> systemd-sysusers.serviceNov <span class="token number">30</span> 00:00:00 Anonimowy systemd<span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span>: systemd-sysusers.service: Failed at step CREDENTIALS spawning systemd-sysusers: Protocol errorNov <span class="token number">30</span> 00:00:00 Anonimowy systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: systemd-sysusers.service: Main process exited, <span class="token assign-left variable">code</span><span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">243</span>/CREDENTIALSNov <span class="token number">30</span> 00:00:00 Anonimowy systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: systemd-sysusers.service: Failed with result <span class="token string">'exit-code'</span><span class="token builtin class-name">.</span>Nov <span class="token number">30</span> 00:00:00 Anonimowy systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Failed to start Create System Users.</code></pre><p>查看 <code>systemd-sysusers.service</code> 单元文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> systemctl <span class="token function">cat</span> systemd-sysusers.service<span class="token comment"># /lib/systemd/system/systemd-sysusers.service</span><span class="token comment">#  SPDX-License-Identifier: LGPL-2.1-or-later</span><span class="token comment">#</span><span class="token comment">#  This file is part of systemd.</span><span class="token comment">#</span><span class="token comment">#  systemd is free software; you can redistribute it and/or modify it</span><span class="token comment">#  under the terms of the GNU Lesser General Public License as published by</span><span class="token comment">#  the Free Software Foundation; either version 2.1 of the License, or</span><span class="token comment">#  (at your option) any later version.</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>Create System Users<span class="token assign-left variable">Documentation</span><span class="token operator">=</span>man:sysusers.d<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> man:systemd-sysusers.service<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token assign-left variable">DefaultDependencies</span><span class="token operator">=</span>no<span class="token assign-left variable">Conflicts</span><span class="token operator">=</span>shutdown.target<span class="token assign-left variable">After</span><span class="token operator">=</span>systemd-remount-fs.service<span class="token assign-left variable">Before</span><span class="token operator">=</span>sysinit.target shutdown.target systemd-update-done.service<span class="token assign-left variable">ConditionNeedsUpdate</span><span class="token operator">=</span>/etc<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>oneshot<span class="token assign-left variable">RemainAfterExit</span><span class="token operator">=</span>yes<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>systemd-sysusers<span class="token assign-left variable">TimeoutSec</span><span class="token operator">=</span>90s<span class="token comment"># Optionally, pick up a root password and shell for the root user from a</span><span class="token comment"># credential passed to the service manager. This is useful for importing this</span><span class="token comment"># data from nspawn's --set-credential= switch.</span><span class="token assign-left variable">LoadCredential</span><span class="token operator">=</span>passwd.hashed-password.root<span class="token assign-left variable">LoadCredential</span><span class="token operator">=</span>passwd.plaintext-password.root<span class="token assign-left variable">LoadCredential</span><span class="token operator">=</span>passwd.shell.root</code></pre><p><code>systemd-sysusers.service</code> 的作用是创建系统用户和系统组，而导致该系统服务单元失败的原因是以下几行配置：</p><pre class="language-textile" data-language="textile"><code class="language-textile"><span class="token phrase">LoadCredential=passwd.hashed-password.rootLoadCredential=passwd.plaintext-password.rootLoadCredential=passwd.shell.root</span></code></pre><div class="note info flat"><p><a href="https://github.com/arkane-systems/genie/wiki/Systemd-units-known-to-be-problematic-under-WSL">Systemd units known to be problematic under WSL</a></p></div><p><code>LoadCredential</code> 和其他凭证选项若想要正常工作，<a href="https://www.kernel.org/doc/gorman/html/understand/understand015.html">Shared Memory Virtual Filesystem</a> 必须挂载在 Systemd 期望的位置，也就是 <code>/dev/shm</code>。然而目前，WSL2 却将其挂载在 <code>/run/shm</code> 并将 <code>/dev/shm</code> 链接到 <code>/run/shm</code>。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> l /dev/shmlrwxrwxrwx <span class="token number">1</span> root root <span class="token number">8</span> Nov <span class="token number">30</span> 00:00 /dev/shm -<span class="token operator">></span> /run/shm</code></pre><p>这意味着任意使用这些选项的单元都将无法正常运作。</p><div class="note info flat"><p>例如，Snap 就将受 <code>shm</code> 位置<a href="https://snapcraft.io/blog/private-shared-memory-support-for-snaps">影响</a>。</p></div><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>创建 <code>/etc/systemd/system/fix-shm.service</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token function">sudo</span> systemctl edit <span class="token parameter variable">--force</span> <span class="token parameter variable">--full</span> fix-shm.service<span class="token operator">></span> systemctl <span class="token function">cat</span> fix-shm.service<span class="token comment"># /etc/systemd/system/fix-shm.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>Fix /dev/shm Issue<span class="token assign-left variable">Before</span><span class="token operator">=</span>sysinit.target<span class="token assign-left variable">DefaultDependencies</span><span class="token operator">=</span>no<span class="token assign-left variable">ConditionPathExists</span><span class="token operator">=</span>/dev/shm<span class="token assign-left variable">ConditionPathIsSymbolicLink</span><span class="token operator">=</span>/dev/shm<span class="token assign-left variable">ConditionPathIsMountPoint</span><span class="token operator">=</span>/run/shm<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>oneshot<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/rm /dev/shm<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/bin/mount <span class="token parameter variable">--bind</span> <span class="token parameter variable">-o</span> X-mount.mkdir /run/shm /dev/shm<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>sysinit.target</code></pre><p>开机自动启用单元</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> fix-shm.service</code></pre><p>立即终止所有正在运行的发行版和 WSL2 轻型实用程序虚拟机</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">> wsl <span class="token operator">--</span>shutdown</code></pre><p>重新启动 WSL2 并查看 Systemd 状态</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> systemctl status● Anonimowy    State: running     Jobs: <span class="token number">0</span> queued   Failed: <span class="token number">0</span> <span class="token function">units</span></code></pre><p>现在 Systemd 正常运作，问题完美解决，希望 Microsoft 尽快修复此 BUG。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Linux </tag>
            
            <tag> WSL </tag>
            
            <tag> WSL2 </tag>
            
            <tag> Systemd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 编译「静态」可执行文件 (PyInstaller + StaticX)</title>
      <link href="/Compiling-Python-Application-Into-Static-Binary-Using-PyInstaller-And-StaticX/"/>
      <url>/Compiling-Python-Application-Into-Static-Binary-Using-PyInstaller-And-StaticX/</url>
      
        <content type="html"><![CDATA[<p>本文将介绍如何将一个 Python 应用程序编译成可执行文件，同时规避动态链接库的依赖问题，实现单文件分发部署。</p><div class="note primary flat"><p>请注意，尽管是「静态」可执行文件，你仍需要考虑目标机器的平台和架构。</p><p>本文不涉及交叉编译。</p></div><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>众所周知，Python 属于动态语言。</p><p>Python 应用程序不需要编译为可执行文件即可运行，但需要目标机器上安装有相应的 Python 解释器和 Python 应用程序需要的外部模块。显然，这对于应用程序的分发部署来说十分不便。</p><p>这里，我介绍一种将 Python 应用程序编译成「静态」可执行文件的方法 (PyInstaller + StaticX)，可以规避动态链接库的依赖问题，实现单文件分发部署。</p><h2 id="编译「静态」可执行文件"><a href="#编译「静态」可执行文件" class="headerlink" title="编译「静态」可执行文件"></a>编译「静态」可执行文件</h2><p>本文将使用 PyInstaller 和 StaticX。</p><div class="note info flat"><p><a href="https://pyinstaller.org/en/latest/">PyInstaller 文档</a></p><p><a href="https://staticx.readthedocs.io/en/latest/">StaticX 文档</a></p></div><h3 id="PyInstaller"><a href="#PyInstaller" class="headerlink" title="PyInstaller"></a>PyInstaller</h3><p>PyInstaller 将一个 Python 应用程序和它的所有依赖项捆绑成一个单一的软件包。用户无需安装 Python 解释器或任何模块就可以运行打包后的应用程序。</p><p>首先，我们需要安装 PyInstaller 包。</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">-U</span> pyinstaller</code></pre><p>打包应用程序和它的所有依赖项成一个单一的软件包</p><pre class="language-bash" data-language="bash"><code class="language-bash">pyinstaller main.py <span class="token parameter variable">--onefile</span></code></pre><p>现在，你可以在 <code>main.py</code> 同目录下的 <code>dist</code> 文件夹中找到打包好的「动态」可执行文件。</p><h3 id="StaticX"><a href="#StaticX" class="headerlink" title="StaticX"></a>StaticX</h3><p>通过上一步，我们已经得到了打包好的「动态」可执行文件。若我们直接将该文件部署到其他机器，兴许能够成功运行。因为，即使是在同平台和同架构的情况下，你仍有极大概率因动态链接库的依赖问题而翻车，特别是 Linux 平台。</p><p>PyInstaller 构建的可执行文件不是完全静态的，因为它仍然依赖于系统的 <code>libc</code>。在 Linux 下，GLIBC 的 ABI 是向后兼容的，但不是向前兼容的。因此，如果你用较新的 GLIBC 链接，你就不能在较旧的系统上运行编译好的可执行文件。</p><p>你此时可能想说：“那么，使用 PyInstaller 前指定旧的 GLIBC 不就好了吗？”</p><p>问题在于，Python 应用程序最关键的 Python 解释器 <code>libpython.so</code> 和其他动态库仍然依赖于较新的 GLIBC。一种解决方法是在你身边最老的系统上编译 Python 解释器及其模块。这确实可行但有些麻烦，好在我们还有其他手段。</p><p>既然动态链接库存在依赖问题，那么直接将 Python 应用程序编译成「静态」可执行文件就是最简单粗暴的解决方法。这里，我们需要使用如 StaticX 这样的工具。</p><p>首先，我们需要安装 StaticX 包。</p><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">-U</span> staticx</code></pre><div class="note warning flat"><p>若要使用 StaticX，除了安装 StaticX 包，你还需要确保你的开发环境中已安装如下命令：</p><ul><li><code>ldd</code></li><li><code>readelf</code></li><li><code>objcopy</code></li><li><code>patchelf</code></li></ul><p>你可以在 Shell 中执行 <code>command -v &lt;COMMAND&gt;</code> 来检查命令是否存在。如有缺失，这些命令也都可以通过 Linux 发行版的包管理器轻松安装。</p></div><p>使用 StaticX 构建「静态」可执行文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash">staticx <span class="token operator">&lt;</span>动态可执行文件路径<span class="token operator">></span> <span class="token operator">&lt;</span>静态可执行文件路径<span class="token operator">></span></code></pre><p>现在，你可以在你所指定的静态可执行文件路径找到最终生成的「静态」可执行文件，不再受 GLIBC 所困。</p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>StaticX 生成的「静态」可执行文件在运行时将在系统的 <code>/tmp/</code> 路径下创建随机临时文件夹，其中存放有应用程序运行所需的库，并且该目录将在应用程序退出时被自动清除。</p><p>应用程序在运行时以该临时文件夹为其工作目录，这意味着诸如 <code>__file__</code> 变量和 <code>os</code>, <code>pathlib</code> 等库所获取到的路径将出现异常。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Python 应用程序分发部署时存在不便，而仅仅使用 PyInstaller 将其和它的所有依赖项捆绑成一个单一的软件包又会碰上动态链接库的依赖问题</p><p>本文介绍的使用 PyInstaller + StaticX 将 Python 应用程序编译成「静态」可执行文件的方法，是一种简单粗暴却又行之有效的解决方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 OpenHarmony 系统开机动画源码</title>
      <link href="/Analysis-Of-The-Boot-Screen-Source-Code-Of-OpenHarmony/"/>
      <url>/Analysis-Of-The-Boot-Screen-Source-Code-Of-OpenHarmony/</url>
      
        <content type="html"><![CDATA[<p>本文将基于 OpenHarmony 3.2 源码，分析 Graphic 子系统 2D 图形库中的 OpenHarmony 系统开机动画源码。</p><p>开机动画是 OpenHarmony 启动后，运行的第一个和图形渲染相关的进程，依赖相对独立便于分析，是分析图形子系统比较好的切入点。</p><h2 id="源码仓库"><a href="#源码仓库" class="headerlink" title="源码仓库"></a>源码仓库</h2><div class="note warning flat"><p>本文基于 OpenHarmony 3.2 源码。</p><p>由于 OpenHarmony 尚未稳定，源代码和项目仓库结构变更速度和幅度都较大，请读者直接参照 OpenHarmony 3.2 源码阅读本文。</p></div><p><a href="https://gitee.com/openharmony/graphic_graphic_2d">Graphic 子系统 2D 图形库源码</a></p><p>仓库结构</p><pre class="language-textile" data-language="textile"><code class="language-textile"><span class="token phrase">foundation/graphic/graphic_2d/├── figures                 # Markdown 引用的图片目录├── frameworks              # 框架代码目录│   ├── animation_server    # animation_server 代码│   ├── bootanimation       # 开机动画目录│   ├── dumper              # graphic dumper 代码│   ├── fence               # fence 代码│   ├── opengl_wrapper      # opengl_wrapper│   ├── surface             # surface 代码│   ├── surfaceimage        # surfaceimage 代码│   ├── vsync               # vsync 代码│   ├── wm                  # wm 代码│   ├── wmserver            # wmserver 代码│   ├── wmservice           # wmservice 代码│   ├── wmtest              # wmtest 代码├── rosen                   # 框架代码目录│   ├── build               # 构建说明│   ├── doc                 # doc│   ├── include             # 对外头文件代码│   ├── modules             # Graphic 子系统各模块代码│   ├── samples             # 实例代码│   ├── test                # 开发测试代码│   ├── tools               # 工具代码├── interfaces              # 图形接口存放目录│   ├── inner_api           # 内部 native 接口存放目录│   └── kits                # js/napi 外部接口存放目录└── utils                   # 小部件存放目录</span></code></pre><img src="/Analysis-Of-The-Boot-Screen-Source-Code-Of-OpenHarmony/EC90646CC76B15B23CED1322A21C6FF4.webp" class="" title="Graphic 子系统主要结构"><h2 id="前导知识：构建目标"><a href="#前导知识：构建目标" class="headerlink" title="前导知识：构建目标"></a>前导知识：构建目标</h2><div class="note info flat"><p><a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/device-dev/subsystems/subsys-build-all.md">官方编译构建指导</a></p></div><p>一般情况下，我们使用最基础的全量编译，也就是编译产品。但在开发过程中，修改一部分代码后，若我们每次都采用全量编译，则十分浪费时间。</p><p>好在 OpenHarmony 的编译构建工具支持部分编译，我们可以指定编译目标：</p><pre class="language-bash" data-language="bash"><code class="language-bash">./build.sh --product-name<span class="token operator">=</span><span class="token operator">&lt;</span>PRODUCT_NAME<span class="token operator">></span> --build-target<span class="token operator">=</span><span class="token operator">&lt;</span>BUILD_TARGET<span class="token operator">></span> <span class="token parameter variable">--ccache</span></code></pre><div class="note info flat"><p>OpenHarmony 的 <code>hb</code> 命令行工具也支持指定编译目标，请自行查阅手册。</p></div><p>这里简单分析一下 OpenHarmony 系统开机动画源码是如何被加入构建编译的。</p><p>我们先抛开平台和产品的差异，假设构建编译包含了 Graphic 子系统。OpenHarmony 中所有子系统的定义可以在 <code>build/subsystem_config.json</code> 中找到，Graphic 子系统也不例外：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"sensors"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"base/sensors"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"sensors"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"graphic"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"foundation/graphic"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"graphic"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"window"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"foundation/window"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"window"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>由此可知 Graphic 子系统位于 <code>foundation/graphic</code> 目录，本文的主角 OpenHarmony 系统开机动画源码就在该目录中 <code>foundation/graphic/graphic_2d/frameworks/bootanimation</code>。</p><p>首先我们关注 <code>bootanimation</code> 目录下的 <code>BUILD.gn</code> 文件：</p><pre class="language-gn" data-language="gn"><code class="language-gn"><span class="token function">ohos_executable</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bootanimation"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  install_enable <span class="token operator">=</span> <span class="token boolean">true</span>  sources <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string-literal"><span class="token string">"src/boot_animation.cpp"</span></span><span class="token punctuation">,</span>    <span class="token string-literal"><span class="token string">"src/main.cpp"</span></span><span class="token punctuation">,</span>    <span class="token string-literal"><span class="token string">"src/util.cpp"</span></span><span class="token punctuation">,</span>  <span class="token punctuation">]</span>………………………………  part_name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"graphic_standard"</span></span>  subsystem_name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"graphic"</span></span><span class="token punctuation">&#125;</span><span class="token function">ohos_prebuilt_etc</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bootanimation_pics"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  source <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"data/bootpic.zip"</span></span>  relative_install_dir <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"init"</span></span>  part_name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"graphic_standard"</span></span>  subsystem_name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"graphic"</span></span><span class="token punctuation">&#125;</span><span class="token function">ohos_prebuilt_etc</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bootanimation_sounds"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  source <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"data/bootsound.wav"</span></span>  relative_install_dir <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"init"</span></span>  part_name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"graphic_standard"</span></span>  subsystem_name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"graphic"</span></span><span class="token punctuation">&#125;</span></code></pre><ul><li><code>bootanimation</code> 编译生成二进制可执行文件，并在全量编译时将生成的文件复制到 <code>/system/bin</code> 目录</li><li><code>bootanimation_pics</code> 在全量编译时将开机动画图片压缩包复制到 <code>/system/bin/init</code> 目录</li><li><code>bootanimation_sounds</code> 在全量编译时将开机动画音效文件复制到 <code>/system/bin/init</code> 目录</li></ul><p>现在，让我们回到父目录 <code>foundation/graphic/graphic_2d</code>。</p><p>查看该目录下的 <code>BUILD.gn</code> 文件：</p><pre class="language-gn" data-language="gn"><code class="language-gn"><span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"default"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  public_deps <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string-literal"><span class="token string">":graphic.rc"</span></span><span class="token punctuation">,</span>    <span class="token string-literal"><span class="token string">"frameworks/dumper:gdumper"</span></span><span class="token punctuation">,</span>    <span class="token string-literal"><span class="token string">"frameworks/dumper:gdumper.ini"</span></span><span class="token punctuation">,</span>    <span class="token string-literal"><span class="token string">"frameworks/dumper:graphic_dumper_server"</span></span><span class="token punctuation">,</span>    <span class="token string-literal"><span class="token string">"frameworks/vsync:vsync_server"</span></span><span class="token punctuation">,</span>  <span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>graphic_standard_feature_bootanimation_enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    public_deps <span class="token operator">+=</span> <span class="token punctuation">[</span> <span class="token string-literal"><span class="token string">"frameworks/bootanimation:bootanimation"</span></span> <span class="token punctuation">]</span>    public_deps <span class="token operator">+=</span> <span class="token punctuation">[</span> <span class="token string-literal"><span class="token string">"frameworks/bootanimation:bootanimation_pics"</span></span> <span class="token punctuation">]</span>    public_deps <span class="token operator">+=</span> <span class="token punctuation">[</span> <span class="token string-literal"><span class="token string">"frameworks/bootanimation:bootanimation_sounds"</span></span> <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>查看该目录下的 <code>bundle.json</code> 文件</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  …………  …………  …………  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"sub_component"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"//third_party/libpng:libpng"</span><span class="token punctuation">,</span>      <span class="token string">"//foundation/graphic/graphic_2d:default"</span><span class="token punctuation">,</span>      <span class="token string">"//foundation/graphic/graphic_2d/interfaces/kits/napi:napi_packages"</span><span class="token punctuation">,</span>      …………      …………      …………    <span class="token punctuation">]</span><span class="token punctuation">,</span>    …………    …………    …………  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  …………  …………  …………<span class="token punctuation">&#125;</span></code></pre><p>通过分析这两个文件，我们得知构建 OpenHarmony 系统开机动画源码所需的编译目标就是 <code>foundation/graphic/graphic_2d:default</code>。</p><p>假设我们使用的产品为 <code>vendor/hihope/rk3568</code>，则可以这样编译构建 OpenHarmony 系统开机动画源码：</p><pre class="language-bash" data-language="bash"><code class="language-bash">./build.sh --product-name<span class="token operator">=</span>rk3568 --build-target<span class="token operator">=</span>foundation/graphic/graphic_2d:default <span class="token parameter variable">--ccache</span></code></pre><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>接下来，本文将解读开机动画源码 <code>foundation/graphic/graphic_2d/frameworks/bootanimation</code>。</p><div class="note info flat"><p>OpenHarmony 的 2D 图形库底层使用的是 Google 开源的 Skia 2D 图形库。</p><p><a href="https://skia.org/">Skia 官网</a></p><p><a href="https://skia.org/docs/">Skia 文档</a></p><p>下文以 <code>Sk</code> 开头的都属于该库，读者可以查阅 Skia 文档进一步了解。</p></div><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>开机动画的启动流程定义在 <code>foundation/graphic/graphic_2d/graphic.cfg</code> 文件中：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"jobs"</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"init"</span><span class="token punctuation">,</span>            <span class="token property">"cmds"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"chmod 666 /dev/mali0"</span><span class="token punctuation">,</span>                <span class="token string">"chown system graphics /dev/mali0"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"services"</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"render_service"</span><span class="token punctuation">,</span>            <span class="token property">"path"</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"/system/bin/render_service"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"uid"</span> <span class="token operator">:</span> <span class="token string">"system"</span><span class="token punctuation">,</span>            <span class="token property">"gid"</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token string">"shell"</span><span class="token punctuation">,</span> <span class="token string">"uhid"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"caps"</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"SYS_NICE"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"secon"</span> <span class="token operator">:</span> <span class="token string">"u:r:render_service:s0"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"bootanimation"</span><span class="token punctuation">,</span>            <span class="token property">"path"</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"/system/bin/bootanimation"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"once"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"uid"</span> <span class="token operator">:</span> <span class="token string">"graphics"</span><span class="token punctuation">,</span>            <span class="token property">"gid"</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"graphics"</span><span class="token punctuation">,</span> <span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token string">"shell"</span><span class="token punctuation">,</span> <span class="token string">"uhid"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"secon"</span> <span class="token operator">:</span> <span class="token string">"u:r:bootanimation:s0"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>OpenHarmony 分别启动了 <code>render_service</code> 和 <code>bootanimation</code> 以显示开机动画。</p><h3 id="初始化工作"><a href="#初始化工作" class="headerlink" title="初始化工作"></a>初始化工作</h3><p><code>src/main.cpp</code></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token string">"main enter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WaitRenderServiceInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span><span class="token operator">&amp;</span> dms <span class="token operator">=</span> OHOS<span class="token double-colon punctuation">::</span>Rosen<span class="token double-colon punctuation">::</span><span class="token class-name">DisplayManager</span><span class="token double-colon punctuation">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> displays <span class="token operator">=</span> dms<span class="token punctuation">.</span><span class="token function">GetAllDisplays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>displays<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token string">"displays is empty, retry to get displays"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        displays <span class="token operator">=</span> dms<span class="token punctuation">.</span><span class="token function">GetAllDisplays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    BootAnimation bootAnimation<span class="token punctuation">;</span>    <span class="token keyword">auto</span> runner <span class="token operator">=</span> AppExecFwk<span class="token double-colon punctuation">::</span><span class="token class-name">EventRunner</span><span class="token double-colon punctuation">::</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> handler <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>AppExecFwk<span class="token double-colon punctuation">::</span>EventHandler<span class="token operator">></span></span></span><span class="token punctuation">(</span>runner<span class="token punctuation">)</span><span class="token punctuation">;</span>    handler<span class="token operator">-></span><span class="token function">PostTask</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>BootAnimation<span class="token double-colon punctuation">::</span>Init<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bootAnimation<span class="token punctuation">,</span>        displays<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">GetWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> displays<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">GetHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> runner<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handler<span class="token operator">-></span><span class="token function">PostTask</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>BootAnimation<span class="token double-colon punctuation">::</span>PlaySound<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bootAnimation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runner<span class="token operator">-></span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token string">"main exit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>WaitRenderServiceInit()</code> 定义在 <code>src/util.cpp</code> 中，其作用就是等待直到 <code>render_service</code> 就绪后返回。</p><p>程序通过 Rosen 框架获取 DisplayManager 实例并取得当前屏幕参数，随后利用 <code>PostTask</code> 函数将 <code>BootAnimation::Init</code> 和 <code>BootAnimation::PlaySound</code> 加入任务队列。</p><p><code>BootAnimation::Init</code> 中 <code>BootAnimation::InitBootWindow</code> 创建启动窗口，通过 WindowScene 调用 WindowImpl 创建 RSSurfaceNode 对象。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">sptr<span class="token operator">&lt;</span>OHOS<span class="token double-colon punctuation">::</span>Rosen<span class="token double-colon punctuation">::</span>WindowOption<span class="token operator">></span> option <span class="token operator">=</span> <span class="token keyword">new</span> OHOS<span class="token double-colon punctuation">::</span><span class="token class-name">Rosen</span><span class="token double-colon punctuation">::</span><span class="token function">WindowOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>option<span class="token operator">-></span><span class="token function">SetWindowType</span><span class="token punctuation">(</span>OHOS<span class="token double-colon punctuation">::</span>Rosen<span class="token double-colon punctuation">::</span>WindowType<span class="token double-colon punctuation">::</span>WINDOW_TYPE_BOOT_ANIMATION<span class="token punctuation">)</span><span class="token punctuation">;</span>option<span class="token operator">-></span><span class="token function">RemoveWindowFlag</span><span class="token punctuation">(</span>OHOS<span class="token double-colon punctuation">::</span>Rosen<span class="token double-colon punctuation">::</span>WindowFlag<span class="token double-colon punctuation">::</span>WINDOW_FLAG_NEED_AVOID<span class="token punctuation">)</span><span class="token punctuation">;</span>option<span class="token operator">-></span><span class="token function">SetWindowRect</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> windowWidth_<span class="token punctuation">,</span> windowHeight_<span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p><code>option-&gt;SetWindowType(OHOS::Rosen::WindowType::WINDOW_TYPE_BOOT_ANIMATION);</code></p><p>  WindowType 定义在 <code>foundation/window/window_manager/interfaces/innerkits/wm/wm_common.h</code> 中，这里使用的是 WINDOW_TYPE_BOOT_ANIMATION 。值得注意的是，<code>wm_common.h</code> 中并不是所有列出的 WindowType 都可以使用，可用的 WindowType 类型可参考 <code>foundation/window/window_manager/wmserver/include/window_zorder_policy.h</code> 文件。</p></li><li><p><code>option-&gt;RemoveWindowFlag(OHOS::Rosen::WindowFlag::WINDOW_FLAG_NEED_AVOID);</code></p><p>  WindowOption 初始化时，自动添加了 WINDOW_FLAG_NEED_AVOID（见 <code>foundation/window/window_manager/wm/src/window_option.cpp</code>），这一步将其移除。</p></li><li><p><code>option-&gt;SetWindowRect( &#123;0, 0, windowWidth_, windowHeight_&#125; );</code></p><p>  根据先前通过 DisplayManager 获取到的屏幕参数设置窗口区域。</p></li></ul><p><code>BootAnimation::Init</code> 中 <code>BootAnimation::InitRsSurface</code> 创建获取 Surface。</p><p><code>BootAnimation::Init</code> 中 <code>BootAnimation::InitPicCoordinates</code> 计算得出开机动画的实际显示区域，大致上就是屏幕居中的位置。</p><p><code>ReadZipFile</code> 和 <code>SortZipFile</code> 函数不是我们关注的重点，其主要作用是解压开机动画图片压缩包，并将其按序添加至 <code>ImageStructVec imageVector_</code>。</p><p>我们需要关注的是其中的 <code>GenImageData</code> 函数：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">GenImageData</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> filename<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>ImageStruct<span class="token operator">></span> imagetruct<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> bufferlen<span class="token punctuation">,</span>    ImageStructVec<span class="token operator">&amp;</span> outBgImgVec<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>imagetruct<span class="token operator">-></span>memPtr<span class="token punctuation">.</span>memBuffer <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">"Json File buffer is null."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">auto</span> skData <span class="token operator">=</span> <span class="token class-name">SkData</span><span class="token double-colon punctuation">::</span><span class="token function">MakeFromMalloc</span><span class="token punctuation">(</span>imagetruct<span class="token operator">-></span>memPtr<span class="token punctuation">.</span>memBuffer<span class="token punctuation">,</span> bufferlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>skData <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">"skdata memory data is null. update data failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    imagetruct<span class="token operator">-></span>memPtr<span class="token punctuation">.</span><span class="token function">setOwnerShip</span><span class="token punctuation">(</span>skData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> codec <span class="token operator">=</span> <span class="token class-name">SkCodec</span><span class="token double-colon punctuation">::</span><span class="token function">MakeFromData</span><span class="token punctuation">(</span>skData<span class="token punctuation">)</span><span class="token punctuation">;</span>    imagetruct<span class="token operator">-></span>fileName <span class="token operator">=</span> filename<span class="token punctuation">;</span>    imagetruct<span class="token operator">-></span>imageData <span class="token operator">=</span> <span class="token class-name">SkImage</span><span class="token double-colon punctuation">::</span><span class="token function">MakeFromEncoded</span><span class="token punctuation">(</span>skData<span class="token punctuation">)</span><span class="token punctuation">;</span>    outBgImgVec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>imagetruct<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>SkCodec::MakeFromData</code>，<code>SkCodec::MakeFromData</code> 和 <code>SkImage::MakeFromEncoded</code> 三个函数合力将从图片文件读至内存的数据转换为 SkImage 类型数据用于后续画面渲染。</p><p>开机动画图压缩包中还有个 <code>config.json</code> 文件，它定义了开机动画的帧率：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"Remark"</span><span class="token operator">:</span> <span class="token string">"FrameRate Support 30, 60 frame rate configuration"</span><span class="token punctuation">,</span>  <span class="token property">"FrameRate"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span></code></pre><p>随后，程序根据读取到的开机动画帧率，设置帧回调函数的调用速率。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">OHOS<span class="token double-colon punctuation">::</span>Rosen<span class="token double-colon punctuation">::</span>VSyncReceiver<span class="token double-colon punctuation">::</span>FrameCallback fcb <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>userData_ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>callback_ <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>BootAnimation<span class="token double-colon punctuation">::</span>OnVsync<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int32_t</span> changefreq <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int32_t</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1000.0</span> <span class="token operator">/</span> freq_<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ret <span class="token operator">=</span> receiver_<span class="token operator">-></span><span class="token function">SetVSyncRate</span><span class="token punctuation">(</span>fcb<span class="token punctuation">,</span> changefreq<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>每次回调都会调用 <code>BootAnimation::OnVsync</code>，向任务队列添加一次 <code>BootAnimation::Draw</code> 任务。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">BootAnimation</span><span class="token double-colon punctuation">::</span><span class="token function">OnVsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">PostTask</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>BootAnimation<span class="token double-colon punctuation">::</span>Draw<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="渲染绘制开机动画"><a href="#渲染绘制开机动画" class="headerlink" title="渲染绘制开机动画"></a>渲染绘制开机动画</h3><div class="note info flat"><p>aa64564b feat: 增加开机音频</p></div><p><code>BootAnimation::Init</code> 任务结束后，<code>BootAnimation::PlaySound</code> 通过多媒体子系统创建播放器，开始播放开机动画音效。</p><p>接下来正式开始绘制：</p><p><code>BootAnimation::Draw</code> 和 <code>BootAnimation::OnDraw</code></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">BootAnimation</span><span class="token double-colon punctuation">::</span><span class="token function">Draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>picCurNo_ <span class="token operator">&lt;</span> <span class="token punctuation">(</span>imgVecSize_ <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        picCurNo_ <span class="token operator">=</span> picCurNo_ <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">CheckExitAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">ROSEN_TRACE_BEGIN</span><span class="token punctuation">(</span>HITRACE_TAG_GRAPHIC_AGP<span class="token punctuation">,</span> <span class="token string">"BootAnimation::Draw RequestFrame"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> frame <span class="token operator">=</span> rsSurface_<span class="token operator">-></span><span class="token function">RequestFrame</span><span class="token punctuation">(</span>windowWidth_<span class="token punctuation">,</span> windowHeight_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>frame <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">"Draw frame is nullptr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">ROSEN_TRACE_END</span><span class="token punctuation">(</span>HITRACE_TAG_GRAPHIC_AGP<span class="token punctuation">)</span><span class="token punctuation">;</span>    framePtr_ <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> canvas <span class="token operator">=</span> framePtr_<span class="token operator">-></span><span class="token function">GetCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">OnDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> picCurNo_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ROSEN_TRACE_BEGIN</span><span class="token punctuation">(</span>HITRACE_TAG_GRAPHIC_AGP<span class="token punctuation">,</span> <span class="token string">"BootAnimation::Draw FlushFrame"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rsSurface_<span class="token operator">-></span><span class="token function">FlushFrame</span><span class="token punctuation">(</span>framePtr_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ROSEN_TRACE_END</span><span class="token punctuation">(</span>HITRACE_TAG_GRAPHIC_AGP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">BootAnimation</span><span class="token double-colon punctuation">::</span><span class="token function">OnDraw</span><span class="token punctuation">(</span>SkCanvas<span class="token operator">*</span> canvas<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> curNo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>canvas <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">LOGE</span><span class="token punctuation">(</span><span class="token string">"OnDraw canvas is nullptr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curNo <span class="token operator">></span> <span class="token punctuation">(</span>imgVecSize_ <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> curNo <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>ImageStruct<span class="token operator">></span> imgstruct <span class="token operator">=</span> imageVector_<span class="token punctuation">[</span>curNo<span class="token punctuation">]</span><span class="token punctuation">;</span>    sk_sp<span class="token operator">&lt;</span>SkImage<span class="token operator">></span> image <span class="token operator">=</span> imgstruct<span class="token operator">-></span>imageData<span class="token punctuation">;</span>    <span class="token function">ROSEN_TRACE_BEGIN</span><span class="token punctuation">(</span>HITRACE_TAG_GRAPHIC_AGP<span class="token punctuation">,</span> <span class="token string">"BootAnimation::OnDraw in drawRect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SkPaint backPaint<span class="token punctuation">;</span>    backPaint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>SK_ColorBLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    canvas<span class="token operator">-></span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token class-name">SkRect</span><span class="token double-colon punctuation">::</span><span class="token function">MakeXYWH</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> windowWidth_<span class="token punctuation">,</span> windowHeight_<span class="token punctuation">)</span><span class="token punctuation">,</span> backPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ROSEN_TRACE_END</span><span class="token punctuation">(</span>HITRACE_TAG_GRAPHIC_AGP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ROSEN_TRACE_BEGIN</span><span class="token punctuation">(</span>HITRACE_TAG_GRAPHIC_AGP<span class="token punctuation">,</span> <span class="token string">"BootAnimation::OnDraw in drawImageRect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SkPaint paint<span class="token punctuation">;</span>    SkRect rect<span class="token punctuation">;</span>    rect<span class="token punctuation">.</span><span class="token function">setXYWH</span><span class="token punctuation">(</span>pointX_<span class="token punctuation">,</span> pointY_<span class="token punctuation">,</span> realWidth_<span class="token punctuation">,</span> realHeight_<span class="token punctuation">)</span><span class="token punctuation">;</span>    canvas<span class="token operator">-></span><span class="token function">drawImageRect</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rect<span class="token punctuation">,</span> <span class="token operator">&amp;</span>paint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ROSEN_TRACE_END</span><span class="token punctuation">(</span>HITRACE_TAG_GRAPHIC_AGP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p><code>Draw</code> 函数：<code>auto frame = rsSurface_-&gt;RequestFrame(windowWidth_, windowHeight_);</code></p><p>通过初始化阶段获取到的 Surface 申请 Frame</p></li><li><p><code>Draw</code> 函数：<code>framePtr_ = std::move(frame); auto canvas = framePtr_-&gt;GetCanvas();</code></p><p>获取 SkCanvas 对象</p></li><li><p><code>OnDraw</code> 函数：<code>canvas-&gt;drawRect(SkRect::MakeXYWH(0.0, 0.0, windowWidth_, windowHeight_), backPaint);</code></p><p><code>windowWidth_</code> 和 <code>windowHeight_</code> 为当前屏幕真实大小，该函数将整块屏幕填满黑色</p></li><li><p><code>OnDraw</code> 函数：<code>rect.setXYWH(pointX_, pointY_, realWidth_, realHeight_);</code> </p><p>通过初始化阶段计算得出的开机动画实际显示区域，设置绘制区域</p></li><li><p><code>OnDraw</code> 函数：<code>canvas-&gt;drawImageRect(image.get(), rect, &amp;paint);</code></p><p>将从图片文件中转换得到的 SkImage 数据渲染到设置好的开机动画实际显示区域</p></li><li><p><code>Draw</code> 函数：<code>rsSurface_-&gt;FlushFrame(framePtr_);</code></p><p>将渲染好的画布数据（纯黑背景 + 一张图片）刷入 Surface 的 BufferQueue 以真正显示到物理屏幕</p></li></ul><p><code>foundation/graphic/graphic_2d/frameworks/surface/src/buffer_queue.cpp</code></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">GSError <span class="token class-name">BufferQueue</span><span class="token double-colon punctuation">::</span><span class="token function">FlushBuffer</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> sequence<span class="token punctuation">,</span> <span class="token keyword">const</span> sptr<span class="token operator">&lt;</span>BufferExtraData<span class="token operator">></span> <span class="token operator">&amp;</span>bedata<span class="token punctuation">,</span>    <span class="token keyword">const</span> sptr<span class="token operator">&lt;</span>SyncFence<span class="token operator">></span><span class="token operator">&amp;</span> fence<span class="token punctuation">,</span> <span class="token keyword">const</span> BufferFlushConfig <span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ScopedBytrace <span class="token function">func</span><span class="token punctuation">(</span><span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">GetStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">BLOGN_FAILURE_RET</span><span class="token punctuation">(</span>GSERROR_NO_CONSUMER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">auto</span> sret <span class="token operator">=</span> <span class="token function">CheckFlushConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sret <span class="token operator">!=</span> GSERROR_OK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">BLOGN_FAILURE_API</span><span class="token punctuation">(</span>CheckFlushConfig<span class="token punctuation">,</span> sret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lockGuard</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferQueueCache_<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span> <span class="token operator">==</span> bufferQueueCache_<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">BLOGN_FAILURE_ID</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> <span class="token string">"not found in cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> GSERROR_NO_ENTRY<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isShared_ <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> <span class="token operator">&amp;</span>state <span class="token operator">=</span> bufferQueueCache_<span class="token punctuation">[</span>sequence<span class="token punctuation">]</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> BUFFER_STATE_REQUESTED <span class="token operator">&amp;&amp;</span> state <span class="token operator">!=</span> BUFFER_STATE_ATTACHED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">BLOGN_FAILURE_ID</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> <span class="token string">"invalid state %&#123;public&#125;d"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> GSERROR_NO_ENTRY<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>listener_ <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> listenerClazz_ <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">CancelBuffer</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> bedata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> GSERROR_NO_CONSUMER<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ScopedBytrace <span class="token function">bufferIPCSend</span><span class="token punctuation">(</span><span class="token string">"BufferIPCSend"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sret <span class="token operator">=</span> <span class="token function">DoFlushBuffer</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> bedata<span class="token punctuation">,</span> fence<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sret <span class="token operator">!=</span> GSERROR_OK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">CountTrace</span><span class="token punctuation">(</span>HITRACE_TAG_GRAPHIC_AGP<span class="token punctuation">,</span> name_<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int32_t</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>dirtyList_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sret <span class="token operator">==</span> GSERROR_OK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>listener_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ScopedBytrace <span class="token function">bufferIPCSend</span><span class="token punctuation">(</span><span class="token string">"OnBufferAvailable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            listener_<span class="token operator">-></span><span class="token function">OnBufferAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>listenerClazz_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ScopedBytrace <span class="token function">bufferIPCSend</span><span class="token punctuation">(</span><span class="token string">"OnBufferAvailable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            listenerClazz_<span class="token operator">-></span><span class="token function">OnBufferAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">BLOGND</span><span class="token punctuation">(</span><span class="token string">"Success Buffer seq id: %&#123;public&#125;d Queue id: %&#123;public&#125;"</span> PRIu64 <span class="token string">" AcquireFence:%&#123;public&#125;d"</span><span class="token punctuation">,</span>        sequence<span class="token punctuation">,</span> uniqueId_<span class="token punctuation">,</span> fence<span class="token operator">-></span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>DoFlushBuffer</code> 函数会调用 Display 驱动的 <code>FlushCache</code> 函数，关于 Display 驱动可以查阅 <code>drivers/peripheral/display</code> 目录。</p><h3 id="开机动画结束条件"><a href="#开机动画结束条件" class="headerlink" title="开机动画结束条件"></a>开机动画结束条件</h3><p>程序将根据先前设置的回调频率调用 <code>BootAnimation::OnVsync</code>，<code>BootAnimation::OnVsync</code> 又将调用 <code>BootAnimation::Draw</code></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>picCurNo_ <span class="token operator">&lt;</span> <span class="token punctuation">(</span>imgVecSize_ <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    picCurNo_ <span class="token operator">=</span> picCurNo_ <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">CheckExitAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>显而易见的，<code>Draw</code> 函数会进行条件判断，将图片文件压缩包中的图片逐个绘制送显。若所有图片都已渲染，则调用 <code>CheckExitAnimation</code> 函数，不再调用后续的 <code>OnDraw</code> 函数。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">BootAnimation</span><span class="token double-colon punctuation">::</span><span class="token function">CheckExitAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token string">"CheckExitAnimation enter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>setBootEvent_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token string">"CheckExitAnimation set bootevent parameter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        system<span class="token double-colon punctuation">::</span><span class="token function">SetParameter</span><span class="token punctuation">(</span><span class="token string">"bootevent.bootanimation.started"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setBootEvent_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string windowInit <span class="token operator">=</span> system<span class="token double-colon punctuation">::</span><span class="token function">GetParameter</span><span class="token punctuation">(</span><span class="token string">"persist.window.boot.inited"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>windowInit <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">PostTask</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>AppExecFwk<span class="token double-colon punctuation">::</span>EventRunner<span class="token double-colon punctuation">::</span>Stop<span class="token punctuation">,</span> runner_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LOGI</span><span class="token punctuation">(</span><span class="token string">"CheckExitAnimation read windowInit is 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>CheckExitAnimation</code> 函数将读取系统参数，判断当前系统是否已启动完成。</p><ul><li>若系统已启动完成，则通过 <code>PostTask(std::bind(&amp;AppExecFwk::EventRunner::Stop, runner_));</code> 结束开机动画进程。</li><li>若系统未启动完成，则继续等待下一次 <code>OnVsync</code> 调用。此时，屏幕将维持显示最后一帧的画面。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>OpenHarmony 开机动画的渲染过程是从 render_service 获取 Buffer，在 Client 端用 Buffer + Skia 创建 Canvas 进行绘制，并逐个图片 flush 到 render_service 的 Server 端，最终完成送显。</p><div class="note warning flat"><p>本文基于 OpenHarmony 3.2 源码。</p><p>由于 OpenHarmony 尚未稳定，源代码和项目仓库结构变更速度和幅度都较大，请读者直接参照 OpenHarmony 3.2 源码阅读本文。</p></div>]]></content>
      
      
      
        <tags>
            
            <tag> OpenHarmony </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Linux 下 JetBrains 全家桶无法识别使用 Node 版本管理器安装的 Node 的问题</title>
      <link href="/How-To-Use-Node-Version-Manager-With-JetBrains-Tools/"/>
      <url>/How-To-Use-Node-Version-Manager-With-JetBrains-Tools/</url>
      
        <content type="html"><![CDATA[<p>本文将介绍如何解决 Linux 下，JetBrains 全家桶无法识别使用 Node 版本管理器安装的 Node 的问题。</p><h2 id="现有问题"><a href="#现有问题" class="headerlink" title="现有问题"></a>现有问题</h2><p>通常来说，我们会使用如 <code>nvm</code>, <code>fnm</code>, <code>volta</code> 等 Node 版本管理器来安装 Node。安装后，我们可以正常地在终端中使用 Node 版本管理器所安装的 Node。</p><p>但目前（2022年）为止，JetBrains 全家桶只兼容 <code>nvm</code>。</p><p><code>nvm</code> 有许多替代品，实际上开发者可能并不使用 <code>nvm</code> 而是使用如 <code>fnm</code> 等替代品。可 JetBrains 全家桶并不兼容它们，不能识别它们所安装的 Node。</p><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>这里，让我们简单分析一下 <code>nvm</code> 的<a href="https://github.com/nvm-sh/nvm/blob/master/install.sh">安装脚本</a>，了解 <code>nvm</code> 是如何运作的。</p><p>当我们执行官方的安装脚本后，脚本首先将执行 <code>nvm_do_install()</code> 函数。我们需要关注的主要是这一部分：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">local</span> NVM_PROFILE<span class="token assign-left variable">NVM_PROFILE</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>nvm_detect_profile<span class="token variable">)</span></span>"</span><span class="token builtin class-name">local</span> PROFILE_INSTALL_DIR<span class="token assign-left variable">PROFILE_INSTALL_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>nvm_install_dir <span class="token operator">|</span> <span class="token builtin class-name">command</span> <span class="token function">sed</span> <span class="token string">"s:^<span class="token environment constant">$HOME</span>:\<span class="token environment constant">$HOME</span>:"</span><span class="token variable">)</span></span>"</span><span class="token assign-left variable">SOURCE_STR</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\\">\\</span>nexport NVM_DIR=<span class="token entity" title="\&quot;">\"</span><span class="token variable">$&#123;PROFILE_INSTALL_DIR&#125;</span><span class="token entity" title="\&quot;">\"</span><span class="token entity" title="\\">\\</span>n[ -s <span class="token entity" title="\&quot;">\"</span>\<span class="token variable">$NVM_DIR</span>/nvm.sh<span class="token entity" title="\&quot;">\"</span> ] &amp;&amp; <span class="token entity" title="\\">\\</span>. <span class="token entity" title="\&quot;">\"</span>\<span class="token variable">$NVM_DIR</span>/nvm.sh<span class="token entity" title="\&quot;">\"</span>  # This loads nvm<span class="token entity" title="\\">\\</span>n"</span><span class="token assign-left variable">COMPLETION_STR</span><span class="token operator">=</span><span class="token string">'[ -s "$NVM_DIR/bash_completion" ] &amp;&amp; \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n'</span><span class="token assign-left variable">BASH_OR_ZSH</span><span class="token operator">=</span>false<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;NVM_PROFILE-&#125;</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">local</span> TRIED_PROFILE  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$&#123;PROFILE&#125;</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token assign-left variable">TRIED_PROFILE</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;NVM_PROFILE&#125;</span> (as defined in \<span class="token variable">$PROFILE</span>), "</span>  <span class="token keyword">fi</span>  nvm_echo <span class="token string">"=> Profile not found. Tried <span class="token variable">$&#123;TRIED_PROFILE-&#125;</span>~/.bashrc, ~/.bash_profile, ~/.zshrc, and ~/.profile."</span>  nvm_echo <span class="token string">"=> Create one of them and run this script again"</span>  nvm_echo <span class="token string">"   OR"</span>  nvm_echo <span class="token string">"=> Append the following lines to the correct file yourself:"</span>  <span class="token builtin class-name">command</span> <span class="token builtin class-name">printf</span> <span class="token string">"<span class="token variable">$&#123;SOURCE_STR&#125;</span>"</span>  nvm_echo<span class="token keyword">else</span>  <span class="token keyword">if</span> nvm_profile_is_bash_or_zsh <span class="token string">"<span class="token variable">$&#123;NVM_PROFILE-&#125;</span>"</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token assign-left variable">BASH_OR_ZSH</span><span class="token operator">=</span>true  <span class="token keyword">fi</span>  <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token builtin class-name">command</span> <span class="token function">grep</span> <span class="token parameter variable">-qc</span> <span class="token string">'/nvm.sh'</span> <span class="token string">"<span class="token variable">$NVM_PROFILE</span>"</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    nvm_echo <span class="token string">"=> Appending nvm source string to <span class="token variable">$NVM_PROFILE</span>"</span>    <span class="token builtin class-name">command</span> <span class="token builtin class-name">printf</span> <span class="token string">"<span class="token variable">$&#123;SOURCE_STR&#125;</span>"</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$NVM_PROFILE</span>"</span>  <span class="token keyword">else</span>    nvm_echo <span class="token string">"=> nvm source string already in <span class="token variable">$&#123;NVM_PROFILE&#125;</span>"</span>  <span class="token keyword">fi</span>  <span class="token keyword">if</span> <span class="token variable">$&#123;BASH_OR_ZSH&#125;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token builtin class-name">command</span> <span class="token function">grep</span> <span class="token parameter variable">-qc</span> <span class="token string">'$NVM_DIR/bash_completion'</span> <span class="token string">"<span class="token variable">$NVM_PROFILE</span>"</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    nvm_echo <span class="token string">"=> Appending bash_completion source string to <span class="token variable">$NVM_PROFILE</span>"</span>    <span class="token builtin class-name">command</span> <span class="token builtin class-name">printf</span> <span class="token string">"<span class="token variable">$COMPLETION_STR</span>"</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$NVM_PROFILE</span>"</span>  <span class="token keyword">else</span>    nvm_echo <span class="token string">"=> bash_completion source string already in <span class="token variable">$&#123;NVM_PROFILE&#125;</span>"</span>  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token variable">$&#123;BASH_OR_ZSH&#125;</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;NVM_PROFILE-&#125;</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  nvm_echo <span class="token string">"=> Please also append the following lines to the if you are using bash/zsh shell:"</span>  <span class="token builtin class-name">command</span> <span class="token builtin class-name">printf</span> <span class="token string">"<span class="token variable">$&#123;COMPLETION_STR&#125;</span>"</span><span class="token keyword">fi</span></code></pre><p>安装脚本将检测 <code>~/.bashrc</code>，<code>~/.zshrc</code>，<code>~/.profile</code> 等文件是否存在。如果存在，就向其写入如下内容：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.nvm"</span><span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="token comment"># This loads nvm</span><span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span>  <span class="token comment"># This loads nvm bash_completion</span></code></pre><p>根据以上内容，当我们启动终端后，将自动执行 <a href="https://github.com/nvm-sh/nvm/blob/master/nvm.sh"><code>$HOME/.nvm/nvm.sh</code></a>。这个脚本的主要工作之一就是向环境变量中写入其所安装并被用户启用的 Node 的路径。</p><p>类似的，<code>fnm</code> 的<a href="https://github.com/Schniz/fnm/blob/master/.ci/install.sh">安装脚本</a>也做了如 <code>nvm</code> 般的工作。它写入如下内容：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/home/kubuntu/.fnm:<span class="token environment constant">$PATH</span><span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span>fnm <span class="token function">env</span><span class="token variable">`</span></span>"</span></code></pre><p>显然，JetBrains 全家桶启动时并没有执行以上命令。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>了解问题所在后，解决它其实并不复杂。我们只需要让 JetBrains 全家桶（如 WebStorm）启动时，能够自动执行 <code>~/.bashrc</code>，<code>~/.zshrc</code>，<code>~/.profile</code> 等文件即可。</p><p>在 KDE 桌面环境下，点击图标后所执行的动作由其中的 <code>Exec</code> 字段所定义。</p><pre class="language-textile" data-language="textile"><code class="language-textile"><span class="token phrase">Exec=env BAMF_DESKTOP_FILE_HINT=/var/lib/snapd/desktop/applications/webstorm_webstorm.desktop /snap/bin/webstorm %f</span></code></pre><div class="note info flat"><p>在不同环境、不同安装方式下，你所看到的 <code>Exec</code> 字段内容可能与此处的大不相同，但这并不要紧。</p></div><p>为修复 JetBrains 全家桶无法识别使用 Node 版本管理器安装的 Node 的问题，我们只需要在原有命令前加上 <code>bash -ic</code> 或 <code>zsh -ic</code> 即可。例如：</p><pre class="language-textile" data-language="textile"><code class="language-textile"><span class="token phrase">Exec=bash -ic "env BAMF_DESKTOP_FILE_HINT=/var/lib/snapd/desktop/applications/webstorm_webstorm.desktop /snap/bin/webstorm %f"</span></code></pre><p>这是使得我们以 <code>Interactive Shell</code> 的形式启动 Bash 并执行后续启动 JetBrains 全家桶的命令。</p><div class="note info flat"><p>Zsh 的运作机制与 Bash 类似。</p></div><blockquote><p>When an interactive shell that is not a login shell is started, bash reads and executes commands from ~&#x2F;.bashrc, if that file exists. This may be inhibited by using the –norc option. The –rcfile file option will force bash to read and execute commands from file instead of ~&#x2F;.bashrc.</p></blockquote><p>当以 <code>Interactive Shell</code> 启动 Bash 时，Bash 将自动读取并执行 <code>~/.bashrc</code>，这样 Node 版本管理器所想要设置的环境变量就得以传入 JetBrains 全家桶的运行环境。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Node.js </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈 OpenHarmony 中北向应用实现页面跳转的几种方式</title>
      <link href="/An-Overview-Of-Several-Ways-To-Implement-Page-Routing-In-Openharmony/"/>
      <url>/An-Overview-Of-Several-Ways-To-Implement-Page-Routing-In-Openharmony/</url>
      
        <content type="html"><![CDATA[<p>本文将介绍 OpenHarmony 中北向应用实现页面跳转的几种方式，涵盖了目前 (OpenHarmony v3.2) 常见的所有方法，开发者可以根据场景需求自行选择。</p><div class="note primary flat"><p>OpenHarmony 迭代迅速，版本间差异巨大。实际开发时，请确认设备的支持能力以及官方最新文档。</p></div><h2 id="页面路由"><a href="#页面路由" class="headerlink" title="页面路由"></a>页面路由</h2><div class="note info flat"><p><a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/reference/apis/js-apis-router.md"><code>@ohos.router</code> (页面路由)</a> 本模块从 API Version 8 开始支持。</p></div><div class="note warning flat"><p><a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/reference/apis/js-apis-system-router.md"><code>@system.router</code> (页面路由)</a> 自 API Version 8 开始，该接口不再维护，推荐使用新接口 <code>@ohos.router</code>。</p></div><p>这种方式只适用于在单一 Ability 内部的页面间跳转，不支持跨 Ability。</p><p>但这种方式的使用场景十分常见，例如点击查看详情 (<code>router.push</code>) 并返回 (<code>router.back</code>)。</p><p>导入模块</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'@ohos.router'</span></code></pre><p><code>@ohos.router</code> 模块中最常用的就是 <code>router.push</code>、<code>router.back</code> 和 <code>router.getParams</code>。</p><ul><li><code>router.push</code> 用于跳转到应用内的指定页面。</li><li><code>router.back</code> 返回上一页面或指定的页面。</li><li><code>router.getParams</code> 获取发起跳转的页面往当前页传入的参数。</li></ul><p>除此之外，某些情况下也会使用 <code>router.clear</code>。(清空页面栈中的所有历史页面，仅保留当前页面作为栈顶页面)</p><div class="note info flat"><p>完整示例请见 <a href="https://github.com/hydrotho/OpenHarmony_Router">GitHub 仓库</a>，如果文章对您有所帮助的话，不妨点个 Star 再走。</p></div><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// MainAbility Index Page</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'@ohos.router'</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token function">routePage</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      url<span class="token operator">:</span> url<span class="token punctuation">,</span>      params<span class="token operator">:</span> params    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Fail in routePage(), code: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, msg: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>err<span class="token punctuation">.</span>msg<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>struct Index <span class="token punctuation">&#123;</span>    abilityName<span class="token operator">:</span> <span class="token builtin">string</span>    pageName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">routePage</span><span class="token punctuation">(</span><span class="token string">'pages/param'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> data<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Route From </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>abilityName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>pageName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>······<span class="token punctuation">&#125;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// MainAbility Param Page</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'@ohos.router'</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>struct Index <span class="token punctuation">&#123;</span>    <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> data<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>······<span class="token punctuation">&#125;</span></code></pre><div class="note warning flat"><p>若你使用 DevEco Studio 进行开发（大概没有人不用），请在侧边栏中右键选择 <code>New</code> ⇨ <code>Page</code> 新建页面。通过这种方式，DevEco Studio 将自动配置好 <code>config.json</code>。</p><p>若你选择手动创建新页面，请参考 <a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/quick-start/package-structure.md">应用包结构说明（FA 模型）</a>和<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/quick-start/stage-structure.md">应用包结构说明（Stage 模型）</a>自行配置 <code>config.json</code> 文件。</p></div><p><code>router.push</code> 和 <code>router.back</code> 接受的参数格式都为 <a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/reference/apis/js-apis-router.md#routeroptions"><code>RouterOptions</code></a>。</p><ul><li><code>url</code> 为目标页面的绝对路径，其中若该值为 <code>&quot;/&quot;</code>，则跳转到首页。</li><li><code>params</code> 为跳转时要同时传递到目标页面的数据，目标页面可通过 <code>router.getParams</code> 获取发起跳转的页面往当前页传入的参数。</li></ul><h2 id="FeatureAbility-模块"><a href="#FeatureAbility-模块" class="headerlink" title="FeatureAbility 模块"></a>FeatureAbility 模块</h2><div class="note info flat"><p>在旧的 FA 模型中，使用 <code>@ohos.ability.featureAbility</code> 模块。</p><p>在新的 Stage 模型中，使用 <code>@ohos.application.Ability</code> 模块。</p></div><p>这种方式只适用于在不同 Ability 间跳转。</p><p>导入模块</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> featureAbility <span class="token keyword">from</span> <span class="token string">'@ohos.ability.featureAbility'</span></code></pre><p>该模块提供了丰富的能力，包括启动新的 Ability、获取 dataAbilityHelper、设置此 Page Ability、获取当前 Ability 对应的窗口，连接服务等。</p><p>这里，我们只会用到 <code>featureAbility.startAbility</code> 和 <code>featureAbility.getWant</code>。</p><ul><li><code>featureAbility.startAbility</code> 用于启动新的 Ability。</li><li><code>featureAbility.getWant</code> 用于获取从 Ability 发送的 Want。</li></ul><p>除此之外，<code>featureAbility.terminateSelf</code> 和 <code>featureAbility.terminateSelfWithResult</code> 也是十分实用的 API。</p><div class="note info flat"><p>完整示例请见 <a href="https://github.com/hydrotho/OpenHarmony_Router">GitHub 仓库</a>，如果文章对您有所帮助的话，不妨点个 Star 再走。</p></div><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// MainAbility Index Page</span><span class="token keyword">import</span> featureAbility <span class="token keyword">from</span> <span class="token string">'@ohos.ability.featureAbility'</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token function">startAbility</span><span class="token punctuation">(</span>bundleName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> abilityName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> parameters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> want <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      bundleName<span class="token operator">:</span> bundleName<span class="token punctuation">,</span>      abilityName<span class="token operator">:</span> abilityName<span class="token punctuation">,</span>      parameters<span class="token operator">:</span> parameters    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> featureAbility<span class="token punctuation">.</span><span class="token function">startAbility</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> want<span class="token operator">:</span> want <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Fail in startAbility(), code: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, msg: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>err<span class="token punctuation">.</span>msg<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>struct Index <span class="token punctuation">&#123;</span>    abilityName<span class="token operator">:</span> <span class="token builtin">string</span>    pageName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startAbility</span><span class="token punctuation">(</span><span class="token string">'com.github.hydrotho.router'</span><span class="token punctuation">,</span> <span class="token string">'com.example.entry.SecondAbility'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> url<span class="token operator">:</span> <span class="token string">'pages/second'</span><span class="token punctuation">,</span> isPassingData<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>······<span class="token punctuation">&#125;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// SecondAbility Second Page</span><span class="token keyword">import</span> featureAbility <span class="token keyword">from</span> <span class="token string">'@ohos.ability.featureAbility'</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token function">startAbility</span><span class="token punctuation">(</span>bundleName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> abilityName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> parameters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> want <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      bundleName<span class="token operator">:</span> bundleName<span class="token punctuation">,</span>      abilityName<span class="token operator">:</span> abilityName<span class="token punctuation">,</span>      parameters<span class="token operator">:</span> parameters    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> featureAbility<span class="token punctuation">.</span><span class="token function">startAbility</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> want<span class="token operator">:</span> want <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Fail in startAbility(), code: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>err<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, msg: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>err<span class="token punctuation">.</span>msg<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>struct Index <span class="token punctuation">&#123;</span>    abilityName<span class="token operator">:</span> <span class="token builtin">string</span>    pageName<span class="token operator">:</span> <span class="token builtin">string</span>    <span class="token decorator"><span class="token at operator">@</span><span class="token function">State</span></span> isPassingData<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">async</span> <span class="token function">getWant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> want <span class="token operator">=</span> <span class="token keyword">await</span> featureAbility<span class="token punctuation">.</span><span class="token function">getWant</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>want<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>want<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span>isPassingData <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isPassingData <span class="token operator">=</span> want<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span>isPassingData    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">aboutToAppear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getWant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>······<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startAbility</span><span class="token punctuation">(</span><span class="token string">'com.github.hydrotho.router'</span><span class="token punctuation">,</span> <span class="token string">'com.example.entry.MainAbility'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>······<span class="token punctuation">&#125;</span></code></pre><div class="note warning flat"><p>若你使用 DevEco Studio 进行开发（大概没有人不用），请在侧边栏右键菜单中新建 <code>Ability</code> 和 <code>Page</code>。通过这种方式，DevEco Studio 将自动配置好 <code>config.json</code>。</p><p>若你选择手动创建新页面，请参考 <a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/quick-start/package-structure.md">应用包结构说明（FA 模型）</a>和<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/quick-start/stage-structure.md">应用包结构说明（Stage 模型）</a>自行配置 <code>config.json</code> 文件。</p></div><div class="note info flat"><p><a href="https://blog.51cto.com/harmonyos/5547165">App与Hap、Entry与feature，bundleName与packge，务必弄明白</a></p></div><p>这种方法使用时的关键在于 <code>featureAbility.startAbility</code> 接受的 <a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/reference/apis/js-apis-application-Want.md"><code>Want</code></a> 类型参数。</p><ul><li><code>bundleName</code> 其实就是 <code>config.json</code> 中 <code>app</code> 里的 <code>bundleName</code> 属性所对应的值，也就是新建北向应用工程时输入的 Bundle Name。</li><li><code>abilityName</code> 值的构成为 <code>package</code> + Ability Name。<code>package</code> 为 <code>config.json</code> 中 <code>module</code> 里的 <code>package</code> 属性所对应的值。</li><li><code>parameters</code> 由开发者自行决定传入的键值对，例如目标页面不为其所在的 Ability 的默认页面时，传入 <code>url</code> 指定目标页面。默认会携带以下键值：<ul><li><code>ohos.aafwk.callerPid</code> 表示拉起方的 pid。</li><li><code>ohos.aafwk.param.callerToken</code> 表示拉起方的 token。</li><li><code>ohos.aafwk.param.callerUid</code> 表示发起方的 uid。</li></ul></li></ul><div class="note warning flat"><p>在许多网络上的教程以及官方文档中，<code>bundleName</code> 与 <code>package</code> 的值相同，导致人们误解以为 <code>abilityName</code> 的前缀为 <code>bundleName</code> 实际上并不是如此。</p><p>例如<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/ability/fa-serviceability.md#%E5%90%AF%E5%8A%A8service">官方开发指导文档</a>中的这段代码</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> featureAbility <span class="token keyword">from</span> <span class="token string">'@ohos.ability.featureAbility'</span><span class="token punctuation">;</span><span class="token keyword">let</span> promise <span class="token operator">=</span> featureAbility<span class="token punctuation">.</span><span class="token function">startAbility</span> <span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>        want<span class="token operator">:</span>        <span class="token punctuation">&#123;</span>            bundleName<span class="token operator">:</span> <span class="token string">"com.jstest.service"</span><span class="token punctuation">,</span>            abilityName<span class="token operator">:</span> <span class="token string">"com.jstest.service.ServiceAbility"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>看似 <code>bundleName</code> 与 <code>abilityName</code> 的前缀相同，其实只不过是这里 <code>bundleName</code> 与 <code>package</code> 的值相同。</p><p>初学者如果理不清这些概念，待到实际开发时，这就是个大坑。</p></div><div class="note warning flat"><p>在 <code>@ohos.router</code> 模块中，我们直接使用 <code>RouterOptions</code> 类型里的 <code>url</code> 属性指定目标页面。</p><p>而在 <code>@ohos.ability.featureAbility</code> 模块中，<code>Want</code> 类型里也有到看似类似的属性 <code>uri</code>。初学者容易想当然地使用 <code>uri</code> 指定目标 Ability 的目标页面，这是不对的。实际上我们需要将目标页面地址包裹在 <code>parameters</code> 属性中，键名为 <code>url</code>。</p></div><p>若进行页面跳转时携带了数据，目标页面可以在页面生命周期的早期调用 <code>featureAbility.getWant()</code> 获取源页面跳转时所传递的数据。</p><p>关于页面的生命周期，OpenHarmony 中 JS 语言和 eTS 语言有所不同，请参考 <a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/ui/js-framework-lifecycle.md">JS 语言页面生命周期函数</a>和 <a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/ui/ts-custom-component-lifecycle-callbacks.md">eTS 语言页面生命周期函数</a>。</p><p>例如，可以在 eTS 语言中的 <code>aboutToAppear</code> 生命周期函数中调用 <code>featureAbility.getWant()</code> 在页面显示前获取传递的数据，对页面进行调整。</p><h2 id="WantAgent-模块"><a href="#WantAgent-模块" class="headerlink" title="WantAgent 模块"></a>WantAgent 模块</h2><p>这种方式只适用于在不同 Ability 间跳转。</p><p>导入模块</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> WantAgent <span class="token keyword">from</span> <span class="token string">'@ohos.wantAgent'</span><span class="token punctuation">;</span></code></pre><p>WantAgent 模块提供了触发、取消、比较 WantAgent 实例等能力。</p><p>WantAgent 不仅可以开启 Ability，还可以发送公共事件，其行为可以通过 <a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/reference/apis/js-apis-wantAgent.md#operationtype">OperationType</a> 操控。这里我们只使用 <code>START_ABILITY</code>。</p><div class="note info flat"><p>完整示例请见 <a href="https://github.com/hydrotho/OpenHarmony_Router">GitHub 仓库</a>，如果文章对您有所帮助的话，不妨点个 Star 再走。</p></div><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// MainAbility Index Page</span><span class="token keyword">import</span> wantAgent <span class="token keyword">from</span> <span class="token string">'@ohos.wantAgent'</span><span class="token punctuation">;</span><span class="token function">startAbilityViaWantAgent</span><span class="token punctuation">(</span>bundleName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> abilityName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> wantAgentInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      wants<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          bundleName<span class="token operator">:</span> bundleName<span class="token punctuation">,</span>          abilityName<span class="token operator">:</span> abilityName        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      operationType<span class="token operator">:</span> wantAgent<span class="token punctuation">.</span>OperationType<span class="token punctuation">.</span><span class="token constant">START_ABILITY</span><span class="token punctuation">,</span>      requestCode<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      wantAgentFlags<span class="token operator">:</span> <span class="token punctuation">[</span>wantAgent<span class="token punctuation">.</span>WantAgentFlags<span class="token punctuation">.</span><span class="token constant">CONSTANT_FLAG</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    wantAgent<span class="token punctuation">.</span><span class="token function">getWantAgent</span><span class="token punctuation">(</span>wantAgentInfo<span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> wantAgentObj<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[WantAgent]getWantAgent error: "</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[WantAgent]getWantAgent success"</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> triggerInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          code<span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span>        wantAgent<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span>wantAgentObj<span class="token punctuation">,</span> triggerInfo<span class="token punctuation">,</span> <span class="token punctuation">(</span>completeData<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[WantAgent]getWantAgent success, completeData: "</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>completeData<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entry</span></span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span>struct Index <span class="token punctuation">&#123;</span>    abilityName<span class="token operator">:</span> <span class="token builtin">string</span>    pageName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startAbilityViaWantAgent</span><span class="token punctuation">(</span><span class="token string">'com.github.hydrotho.router'</span><span class="token punctuation">,</span> <span class="token string">'com.example.entry.WantAgentAbility'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>······<span class="token punctuation">&#125;</span></code></pre><div class="note warning flat"><p>若你使用 DevEco Studio 进行开发（大概没有人不用），请在侧边栏右键菜单中新建 <code>Ability</code> 和 <code>Page</code>。通过这种方式，DevEco Studio 将自动配置好 <code>config.json</code>。</p><p>若你选择手动创建新页面，请参考 <a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/quick-start/package-structure.md">应用包结构说明（FA 模型）</a>和<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/quick-start/stage-structure.md">应用包结构说明（Stage 模型）</a>自行配置 <code>config.json</code> 文件。</p></div><p>这里的 <code>wants</code> 属性也是 <code>Want</code> 类型，具体注意事项请见上文。</p><p>WantAgent 模块一般还是其公共事件功能 (<code>SEND_COMMON_EVENT</code>) 较为常用，更多功能请参考<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/reference/apis/js-apis-wantAgent.md">官方文档</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了目前 (OpenHarmony v3.2) 北向应用实现页面跳转常见的所有方法，开发者可以根据场景需求自行选择。</p><p>一般来说，我们可以这样选择：</p><ul><li>若使用场景为同一 Ability 内部的不同页面间跳转，选择 <code>@ohos.router</code> 模块。</li><li>若使用场景为不同 Ability 间跳转，选择 <code>@ohos.ability.featureAbility</code> 模块（FA 模型）或 <code>@ohos.application.Ability</code> 模块（Stage 模型）。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> OpenHarmony </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析 PowerShell 中的 PSReadLine 模块</title>
      <link href="/Getting-Started-With-The-PSReadLine-Module-In-PowerShell/"/>
      <url>/Getting-Started-With-The-PSReadLine-Module-In-PowerShell/</url>
      
        <content type="html"><![CDATA[<p>本文将介绍 PowerShell 中的 PSReadLine 模块，并给出一些实用的配置示例。</p><div class="note primary flat"><p>本文基于 PowerShell 7.2 LTS 版本，请读者使用 PowerShell 7.2 或更新版本。</p><p><a href="https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell">官方文档</a></p></div><h2 id="PSReadLine-模块源起"><a href="#PSReadLine-模块源起" class="headerlink" title="PSReadLine 模块源起"></a>PSReadLine 模块源起</h2><blockquote><p>A bash inspired readline implementation for PowerShell.</p></blockquote><p>PSReadLine 模块是在 Bash 的启发下开发的 PowerShell 版 Readline 实现。</p><p>那么，Readline 又是什么呢？</p><p>Readline 是一个软件库，可为具有命令行界面（例如 Bash）的交互式程序提供行编辑器和历史记录功能。</p><h2 id="PSReadLine-模块功能简介"><a href="#PSReadLine-模块功能简介" class="headerlink" title="PSReadLine 模块功能简介"></a>PSReadLine 模块功能简介</h2><p>PSReadLine 模块为 PowerShell 终端带来了强大的命令行编辑器体验。</p><ul><li>语法着色</li><li>语法错误提示</li><li>命令补全</li><li>自动保存历史命令</li><li>交互式搜索历史命令</li><li>智能提示</li><li>ETC.</li></ul><p>用户可以使用 <code>Get-PSReadLineOption</code> 命令获取 PSReadLine 模块的当前设置，亦可使用 <code>Set-PSReadLineOption</code> 修改 PSReadLine 模块的设置。</p><p>下文将着重介绍 PSReadLine 模块中命令历史记录相关的功能及配置。</p><h2 id="PSReadLine-模块命令历史记录功能"><a href="#PSReadLine-模块命令历史记录功能" class="headerlink" title="PSReadLine 模块命令历史记录功能"></a>PSReadLine 模块命令历史记录功能</h2><h3 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h3><p>PSReadLine 模块维护了一份记录着历史命令的文件，名为 <code>&quot;$($host.Name)_history.txt&quot;</code>，一般来说名为 <code>ConsoleHost_history.txt</code>，文件路径为 <code>&quot;$Env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt&quot;</code>。</p><p>PSReadLine 模块会自动过滤敏感内容，任何包含下列内容的命令将不会被记录。</p><ul><li>password</li><li>asplaintext</li><li>token</li><li>apikey</li><li>secret</li></ul><h3 id="Bash-中的命令历史记录功能"><a href="#Bash-中的命令历史记录功能" class="headerlink" title="Bash 中的命令历史记录功能"></a>Bash 中的命令历史记录功能</h3><p>若读者熟悉 Bash Shell 一定知道 Bash 可以通过配置 Bash 变量来修改 Bash 的命令历史记录功能，不熟悉的读者可以查阅<a href="https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html">官方文档</a>。</p><p>例如 <code>HISTCONTROL</code> 变量，该变量有几个取值 <code>ignorespace</code>, <code>ignoredups</code>, <code>erasedups</code> 和 <code>ignoreboth</code>。</p><p>若设置 <code>ignorespace</code>，所有以空格开头的命令将不会被写入历史记录。</p><p>若设置 <code>ignoredups</code>，所有与上一条历史命令重复的命令将不会被写入历史记录。</p><p>若设置 <code>erasedups</code>，所有与当前命令重复的历史命令将被从历史记录中删除并将当前命令写入历史记录。</p><p><code>ignoreboth</code> 则相当于 <code>ignorespace</code> 和 <code>ignoredups</code> 的组合。</p><p>一般情况下，Bash 默认将 <code>HISTCONTROL</code> 变量设置为 <code>ignoreboth</code>，这将大大减少命令历史记录中的「噪音」。</p><h3 id="在-PowerShell-中模仿-Bash-的历史命令记录策略"><a href="#在-PowerShell-中模仿-Bash-的历史命令记录策略" class="headerlink" title="在 PowerShell 中模仿 Bash 的历史命令记录策略"></a>在 PowerShell 中模仿 Bash 的历史命令记录策略</h3><p>那么，如何在 PowerShell 中实现类似于 <code>ignoreboth</code> 的历史命令记录策略呢？这需要些许技巧。</p><p>如果想要实现类似于 <code>ignoredups</code> 的效果十分简单，PSReadLine 模块中直接提供了 <code>-HistoryNoDuplicates</code> 配置项，该选项默认为 <code>$False</code>。你可直接执行 <code>(Get-PSReadLineOption).HistoryNoDuplicates = $True</code> 将该配置项启用。</p><p>问题在于 <code>ignorespace</code>，PSReadLine 模块并没有提供配置项实现类似的效果，好在 PSReadLine 模块提供了另一个更加强大的配置项 <code>-AddToHistoryHandler</code>。我们可以自定义一个脚本块，用于控制将哪些命令添加到 PSReadLine 历史记录。</p><p>该脚本块接受命令行作为输入并返回 <code>$True</code> 或 <code>$False</code>。若返回为 <code>$True</code> 则将该条命令加入历史记录，否则不将其加入历史记录。</p><h3 id="持久化-PSReadLine-模块的命令历史记录功能配置"><a href="#持久化-PSReadLine-模块的命令历史记录功能配置" class="headerlink" title="持久化 PSReadLine 模块的命令历史记录功能配置"></a>持久化 PSReadLine 模块的命令历史记录功能配置</h3><p>如果直接在 PowerShell 会话中使用 <code>Set-PSReadLineOption</code> 配置 PSReadLine 模块，该会话中的所有配置将在下一个会话中失效，换言之，配置是特定于会话的。</p><p>难道我们每次启动 PowerShell 会话都需要手动重新配置一遍吗？我们可以使用 PowerShell 配置文件来持久化配置。</p><div class="note default flat"><p>若你不清楚如何创建并使用 PowerShell 配置文件，请参考<a href="https://hydrotho.github.io/How-To-Create-And-Use-A-PowerShell-Profile">这篇博文</a>。</p></div><p>打开 PowerShell 配置文件写入以下内容</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token variable">$options</span> = @<span class="token punctuation">&#123;</span>    HistoryNoDuplicates           = <span class="token boolean">$True</span>    AddToHistoryHandler           = <span class="token punctuation">&#123;</span>        <span class="token keyword">Param</span><span class="token punctuation">(</span><span class="token namespace">[String]</span><span class="token variable">$line</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token variable">$line</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">-ne</span> <span class="token string">' '</span> <span class="token operator">-and</span> <span class="token variable">$line</span><span class="token punctuation">.</span>Length <span class="token operator">-gt</span> 5    <span class="token punctuation">&#125;</span>    HistorySearchCursorMovesToEnd = <span class="token boolean">$True</span><span class="token punctuation">&#125;</span><span class="token function">Set-PSReadLineOption</span> @options</code></pre><div class="note default flat"><p>你也可以直接下载使用我的 PowerShell 配置文件。</p><p><a href="https://github.com/hydrotho/iScript/blob/main/PowerShell/Profile.ps1">GitHub 仓库地址</a></p><p>如果文章对你有所帮助的话，欢迎给我点个 Star。</p></div><h2 id="其它-PSReadLine-模块功能"><a href="#其它-PSReadLine-模块功能" class="headerlink" title="其它 PSReadLine 模块功能"></a>其它 PSReadLine 模块功能</h2><div class="note info flat"><p>本文未提及的功能，读者可自行查阅<a href="https://docs.microsoft.com/en-us/powershell/module/psreadline">官方文档</a></p></div><p>你可以使用 <code>-EditMode</code> 配置项指定命令行编辑模式，例如 Emacs 或 Vi。</p><p>如果你习惯使用 Vi 键位的话，你还可以使用 <code>-ViModeChangeHandler</code> 显示 Vi 模式的变更。</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token keyword">function</span> OnViModeChange <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">-eq</span> <span class="token string">'Command'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment"># Set the cursor to a blinking block.</span>        <span class="token function">Write-Host</span> <span class="token operator">-</span>NoNewLine <span class="token string">"`e[1 q"</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment"># Set the cursor to a blinking line.</span>        <span class="token function">Write-Host</span> <span class="token operator">-</span>NoNewLine <span class="token string">"`e[5 q"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">Set-PSReadLineOption</span> <span class="token operator">-</span>ViModeIndicator Script <span class="token operator">-</span>ViModeChangeHandler <span class="token variable">$Function</span>:OnViModeChange</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> PowerShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建并使用 PowerShell 配置文件</title>
      <link href="/How-To-Create-And-Use-A-PowerShell-Profile/"/>
      <url>/How-To-Create-And-Use-A-PowerShell-Profile/</url>
      
        <content type="html"><![CDATA[<p>本文将介绍如何创建并使用 PowerShell 配置文件以自定义 PowerShell 会话环境。</p><div class="note primary flat"><p>本文基于 PowerShell 7.2 LTS 版本，请读者使用 PowerShell 7.2 或更新版本。</p><p><a href="https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell">官方文档</a></p></div><h2 id="PowerShell-配置文件简介"><a href="#PowerShell-配置文件简介" class="headerlink" title="PowerShell 配置文件简介"></a>PowerShell 配置文件简介</h2><div class="note info flat"><p>PowerShell 配置文件是在 PowerShell 启动时运行的脚本。</p></div><p>类似于 Bash 中的 <code>.bashrc</code> 和 <code>.bash_profile</code> 等文件，PowerShell 中的配置文件也将在 PowerShell 启动时被自动加载。</p><p>用户可以在 PowerShell 配置文件中添加命令、别名、函数、变量、管理单元、模块和 PowerShell 驱动器，以便在所有 PowerShell 会话中复用这些配置，而无需重新配置它们。</p><p>PowerShell 支持多个配置文件并按照优先级加载。下面按照优先级顺序列出 Windows 下 PowerShell 配置文件的路径。</p><ul><li>所有用户、所有主机 <code>$PSHOME\Profile.ps1</code></li><li>所有用户，当前主机 <code>$PSHOME\Microsoft.PowerShell_profile.ps1</code></li><li>当前用户、所有主机 <code>$Home\Documents\PowerShell\Profile.ps1</code></li><li>当前用户，当前主机 <code>$Home\Documents\PowerShell\Microsoft.PowerShell_profile.ps1</code></li></ul><div class="note info flat"><ul><li>自动变量 <code>$PSHOME</code> 中保存着 PowerShell 的安装目录</li><li>自动变量 <code>$Home</code> 中保存着当前用户的主目录</li></ul></div><p>若想查看 PowerShell 配置文件的路径也可使用自动变量 <code>$PROFILE</code>，更多相关内容请查阅<a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles#the-profile-variable">官方文档</a>。</p><div class="note info flat"><p>第三方应用程序也可以使用自己特定的配置文件。</p></div><h2 id="创建并使用-PowerShell-配置文件"><a href="#创建并使用-PowerShell-配置文件" class="headerlink" title="创建并使用 PowerShell 配置文件"></a>创建并使用 PowerShell 配置文件</h2><h3 id="创建-PowerShell-配置文件"><a href="#创建-PowerShell-配置文件" class="headerlink" title="创建 PowerShell 配置文件"></a>创建 PowerShell 配置文件</h3><p>若要创建 PowerShell 配置文件，可使用以下命令格式：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token operator">-</span>Path &lt;PROFILE-NAME><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">New-Item</span> <span class="token operator">-</span>ItemType File <span class="token operator">-</span>Path &lt;PROFILE-NAME> <span class="token operator">-</span>Force<span class="token punctuation">&#125;</span></code></pre><p>例如，若要创建<code>所有用户、所有主机</code>配置文件，请使用以下命令：</p><div class="note default flat"><p>若你未安装 sudo 脚本，请参考<a href="https://hydrotho.github.io/How-To-Use-Sudo-Command-In-PowerShell">这篇博文</a>。</p></div><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token operator">-</span>Path <span class="token variable">$PROFILE</span><span class="token punctuation">.</span>AllUsersAllHosts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  sudo <span class="token function">New-Item</span> <span class="token operator">-</span>ItemType File <span class="token operator">-</span>Path <span class="token variable">$PROFILE</span><span class="token punctuation">.</span>AllUsersAllHosts <span class="token operator">-</span>Force<span class="token punctuation">&#125;</span></code></pre><h3 id="使用-PowerShell-配置文件"><a href="#使用-PowerShell-配置文件" class="headerlink" title="使用 PowerShell 配置文件"></a>使用 PowerShell 配置文件</h3><p>若你想要将一些变量、别名、函数、命令或添加到 PowerShell 会话的模块保存，使其在将来所有的会话中可用，请将其添加到 PowerShell 配置文件。</p><div class="note default flat"><p>若你未安装 sudo 脚本，请参考<a href="https://hydrotho.github.io/How-To-Use-Sudo-Command-In-PowerShell">这篇博文</a>。</p></div><pre class="language-powershell" data-language="powershell"><code class="language-powershell">sudo notepad <span class="token variable">$PROFILE</span><span class="token punctuation">.</span>AllUsersAllHosts</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> PowerShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 PowerShell 中使用 sudo 命令实现临时提权</title>
      <link href="/How-To-Use-Sudo-Command-In-PowerShell/"/>
      <url>/How-To-Use-Sudo-Command-In-PowerShell/</url>
      
        <content type="html"><![CDATA[<p>本文将介绍如何在 PowerShell 中使用 sudo 命令实现临时提权，以及一些其它的提权方法。</p><h2 id="何为-sudo？为何使用-sudo-来实现临时提权？"><a href="#何为-sudo？为何使用-sudo-来实现临时提权？" class="headerlink" title="何为 sudo？为何使用 sudo 来实现临时提权？"></a>何为 sudo？为何使用 sudo 来实现临时提权？</h2><p>sudo 是一种计算机程序，用于类 Unix 操作系统如 BSD、Mac OS X 以及 GNU&#x2F;Linux，该计算机程序可以让用户透过安全的方式使用特殊的权限执行程序（通常为操作系统的超级用户）。</p><p>在 Windows 系统中虽有类似的提权方法（<a href="https://hydrotho.github.io/How-To-Use-Sudo-Command-In-PowerShell/#PowerShell-%E4%B8%AD%E5%85%B6%E5%AE%83%E7%9A%84%E6%8F%90%E6%9D%83%E6%96%B9%E6%B3%95">本文末尾</a>将介绍这些方法），但大多都存在使用不便的缺点。</p><p>好在我们可以通过安装<a href="https://github.com/lukesampson/psutils/blob/master/sudo.ps1">开源的 “sudo” 脚本</a>，实现便捷的临时提权操作，大大提升用户的使用体验。</p><h2 id="使用-Scoop-安装-sudo-脚本"><a href="#使用-Scoop-安装-sudo-脚本" class="headerlink" title="使用 Scoop 安装 sudo 脚本"></a>使用 Scoop 安装 sudo 脚本</h2><div class="note info flat"><p>Scoop 是一个 Win­dows 包管理工具。</p><p>本文使用 Scoop 安装 sudo 脚本。</p></div><h3 id="安装-Scoop"><a href="#安装-Scoop" class="headerlink" title="安装 Scoop"></a>安装 Scoop</h3><p>设置 PowerShell 执行策略</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Set-ExecutionPolicy</span> <span class="token operator">-</span>ExecutionPolicy RemoteSigned <span class="token operator">-</span>Scope CurrentUser</code></pre><p>使用官方脚本一键安装 Scoop</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Invoke-RestMethod</span> get<span class="token punctuation">.</span>scoop<span class="token punctuation">.</span>sh <span class="token punctuation">|</span> <span class="token function">Invoke-Expression</span></code></pre><div class="note info flat"><p>若想进一步了解 Scoop 的使用技巧，推荐阅读 P3TERX 的<a href="https://p3terx.com/archives/scoop-the-best-windows-package-manager.html">这篇文章</a>。</p></div><h3 id="安装-sudo-脚本"><a href="#安装-sudo-脚本" class="headerlink" title="安装 sudo 脚本"></a>安装 sudo 脚本</h3><p>安装 Scoop 后，再安装 sudo 脚本就十分便捷。</p><p>只需要执行以下命令</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">scoop install sudo</code></pre><h2 id="使用-sudo-命令实现临时提权"><a href="#使用-sudo-命令实现临时提权" class="headerlink" title="使用 sudo 命令实现临时提权"></a>使用 sudo 命令实现临时提权</h2><p>使用 Scoop 安装完 sudo 脚本后，你只要在需要管理员权限执行的命令前加上 sudo 即可。例如:</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">sudo <span class="token function">Get-Service</span> ssh-agent <span class="token punctuation">|</span> <span class="token function">Set-Service</span> <span class="token operator">-</span>StartupType Automatic</code></pre><p>细心的读者可能会发现上方执行的命令有些不对劲，紧随 sudo 命令后的 <code>Get-Service</code> 并不需要提权运行，而需要提权运行的 <code>Set-Service</code> 位于 <code>|</code> 之后。</p><p>在 Linux 中，这样使用 sudo 命令肯定是行不通的，管道符号后的命令实际上并没有提权运行。</p><p>但本文中所安装的 sudo 脚本是支持这种使用方法的，你只需要在一连串命令的开头加上一个 sudo 即可。这是因为该 sudo 脚本实际上是以管理员权限新建了一个进程，在新进程中执行 sudo 命令后跟随的所有命令后返回。</p><h2 id="PowerShell-中其它的提权方法"><a href="#PowerShell-中其它的提权方法" class="headerlink" title="PowerShell 中其它的提权方法"></a>PowerShell 中其它的提权方法</h2><h3 id="Start-Process"><a href="#Start-Process" class="headerlink" title="Start-Process"></a>Start-Process</h3><p><a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.management/start-process">官方文档</a></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Start-Process</span> <span class="token operator">-</span>FilePath <span class="token string">"powershell"</span> <span class="token operator">-</span>Verb RunAs</code></pre><h3 id="Runas"><a href="#Runas" class="headerlink" title="Runas"></a>Runas</h3><p><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771525(v=ws.11)">官方文档</a></p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">runas <span class="token operator">/</span>user:Administrator powershell</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> PowerShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入了解 Useradd 命令</title>
      <link href="/Learn-More-About-Useradd-Command/"/>
      <url>/Learn-More-About-Useradd-Command/</url>
      
        <content type="html"><![CDATA[<p>添加用户是 Linux 中最基本的操作之一，但最常用的 useradd 命令在不同 Linux 发行版可能有着不同的行为，而方便好用的 adduser 命令不是所有 Linux 发行版都自带。</p><p>深入了解 useradd 命令可以帮助我们更好地管理 Linux 系统。</p><h2 id="useradd-命令"><a href="#useradd-命令" class="headerlink" title="useradd 命令"></a>useradd 命令</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span></code></pre><div class="note primary flat"><p>只有 root 用户或者拥有 <code>sudo</code> 权限的用户可以使用 useradd 命令来创建新用户。</p></div><p>创建新用户时，useradd 根据执行命令时所提供的选项和 <code>/etc/default/useradd</code> 文件中的默认值来创建新用户。</p><p>但在不同的 Linux 发行版上 <code>/etc/default/useradd</code> 文件中的内容有所不同，这就导致 useradd 命令在不同的 Linux 发行版上可能有着不同的执行结果。</p><p>此外，useradd 命令还会读取 <code>/etc/login.defs</code> 文件。其中包含诸如密码过期策略、系统用户和一般用户的 UID 范围等等。</p><h3 id="简简单单创建一个新用户"><a href="#简简单单创建一个新用户" class="headerlink" title="简简单单创建一个新用户"></a>简简单单创建一个新用户</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">useradd</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span></code></pre><div class="note warning flat"><p>当不提供任何选项时，useradd 命令根据 <code>/etc/default/useradd</code> 文件中的默认值来创建新用户。</p></div><p>执行后，useradd 命令自动在 <code>/etc/passwd</code>，<code>/etc/shadow</code>，<code>/etc/group</code> 和 <code>/etc/gshadow</code> 中添加相应项。</p><p>但 useradd 命令只会创建新用户而不会为其设置密码，要想以新用户的身份登录，还需要为其设置一个密码。</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">passwd</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span>New password: Retype new password: passwd: password updated successfully</code></pre><h3 id="创建拥有家目录的新用户"><a href="#创建拥有家目录的新用户" class="headerlink" title="创建拥有家目录的新用户"></a>创建拥有家目录的新用户</h3><p>使用 <code>-m</code> (<code>--create-home</code>) 选项来创建拥有家目录 (<code>/home/&lt;用户名&gt;</code>) 的新用户</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">useradd</span> <span class="token parameter variable">-m</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span></code></pre><p>该选项将创建新用户的家目录 (<code>/home/&lt;用户名&gt;</code>) 并将 <code>/etc/skel</code> 目录下的文件复制至新用户的家目录。</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">ls</span> <span class="token parameter variable">-la</span> /home/hydrotho/total <span class="token number">12</span>drwx------ <span class="token number">2</span> hydrotho hydrotho  <span class="token number">62</span> Jan  <span class="token number">1</span> <span class="token number">10</span>:10 <span class="token builtin class-name">.</span>drwxr-xr-x <span class="token number">4</span> root     root      <span class="token number">32</span> Jan  <span class="token number">1</span> <span class="token number">10</span>:10 <span class="token punctuation">..</span>-rw-r--r-- <span class="token number">1</span> hydrotho hydrotho  <span class="token number">21</span> Nov <span class="token number">22</span> 03:31 .bash_logout-rw-r--r-- <span class="token number">1</span> hydrotho hydrotho  <span class="token number">57</span> Nov <span class="token number">22</span> 03:31 .bash_profile-rw-r--r-- <span class="token number">1</span> hydrotho hydrotho <span class="token number">141</span> Nov <span class="token number">22</span> 03:31 .bashrc</code></pre><h3 id="创建新用户并将其添加至多个用户组"><a href="#创建新用户并将其添加至多个用户组" class="headerlink" title="创建新用户并将其添加至多个用户组"></a>创建新用户并将其添加至多个用户组</h3><p>Linux 系统中的用户组分为主用户组和附加用户组。一个用户可以属于一个主用户组并同时属于零或多个附加用户组。</p><p>在 Linux 系统的日常使用中，我们往往不直接使用 root 用户而是使用一般用户，但又时常需要 root 权限来执行一些操作。此时，我们往往使用 sudo 命令来临时提权。</p><p>为了让一般用户拥有使用 sudo 命令的权限，我们可以使用 <code>-G</code> (<code>--groups</code>) 选项将其添加至 <code>wheel</code> 组。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">useradd</span> <span class="token parameter variable">-G</span> wheel <span class="token operator">&lt;</span>用户名<span class="token operator">></span></code></pre><div class="note info flat"><p>有些 Linux 发行版没有 <code>wheel</code> 用户组，取而代之的是 <code>sudo</code> 用户组。</p></div><p>我们可以使用 <code>id</code> 命令查看当前用户的信息。</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">id</span><span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">(</span>hydrotho<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">(</span>hydrotho<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">(</span>hydrotho<span class="token punctuation">)</span>,998<span class="token punctuation">(</span>wheel<span class="token punctuation">)</span></code></pre><h3 id="创建新用户时指定默认-Shell"><a href="#创建新用户时指定默认-Shell" class="headerlink" title="创建新用户时指定默认 Shell"></a>创建新用户时指定默认 Shell</h3><p>默认情况下，新用户的默认 Shell 由 <code>/etc/default/useradd</code> 文件中的值来指定，可能是 <code>/bin/sh</code> 或者 <code>/bin/bash</code>。若想要指定默认 Shell，可以使用 <code>-s</code> (<code>--shell</code>) 选项。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">useradd</span> <span class="token parameter variable">-s</span> /bin/bash <span class="token operator">&lt;</span>用户名<span class="token operator">></span></code></pre><p>若想要确认当前用户所使用的 Shell，可执行</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$SHELL</span>/bin/bash</code></pre><h3 id="修改-useradd-命令的默认值"><a href="#修改-useradd-命令的默认值" class="headerlink" title="修改 useradd 命令的默认值"></a>修改 useradd 命令的默认值</h3><p>在上文中多次提到，若 useradd 命令的选项缺省，将使用 <code>/etc/default/useradd</code> 文件中的默认值来创建新用户。</p><p>那么，我们能不能修改 useradd 命令的默认值，使得在创建用户时更加统一且快捷呢？答案是肯定的。</p><p>查看当前 useradd 命令的默认值</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">useradd</span> <span class="token parameter variable">-D</span><span class="token assign-left variable">GROUP</span><span class="token operator">=</span><span class="token number">100</span><span class="token assign-left variable"><span class="token environment constant">HOME</span></span><span class="token operator">=</span>/home<span class="token assign-left variable">INACTIVE</span><span class="token operator">=</span>-1<span class="token assign-left variable">EXPIRE</span><span class="token operator">=</span><span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span><span class="token assign-left variable">SKEL</span><span class="token operator">=</span>/etc/skel<span class="token assign-left variable">CREATE_MAIL_SPOOL</span><span class="token operator">=</span>no</code></pre><p>修改默认 Shell 为 <code>/bin/bash</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">useradd</span> <span class="token parameter variable">-D</span> <span class="token parameter variable">-s</span> /bin/bash</code></pre><h2 id="adduser-命令"><a href="#adduser-命令" class="headerlink" title="adduser 命令"></a>adduser 命令</h2><p>useradd 是添加用户的底层工具，而 adduser 则是一个用 Perl 编写的 useradd 的交互式前端工具。然而并不是所有 Linux 发行版都自带 adduser，抑或是可以直接安装 adduser。</p><p>adduser 的使用极其简单，跟随提示即可。</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> adduser hydrothoAdding user <span class="token variable"><span class="token variable">`</span>hydrotho' <span class="token punctuation">..</span>.Adding new group <span class="token variable">`</span></span>hydrotho<span class="token string">' (1001) ...Adding new user `hydrotho'</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span> with group <span class="token variable"><span class="token variable">`</span>hydrotho' <span class="token punctuation">..</span>.Creating home directory <span class="token variable">`</span></span>/home/hydrotho<span class="token string">' ...Copying files from `/etc/skel'</span> <span class="token punctuation">..</span>.New password: Retype new password: passwd: password updated successfullyChanging the user information <span class="token keyword">for</span> hydrothoEnter the new value, or press ENTER <span class="token keyword">for</span> the default        Full Name <span class="token punctuation">[</span><span class="token punctuation">]</span>:         Room Number <span class="token punctuation">[</span><span class="token punctuation">]</span>:         Work Phone <span class="token punctuation">[</span><span class="token punctuation">]</span>:         Home Phone <span class="token punctuation">[</span><span class="token punctuation">]</span>:         Other <span class="token punctuation">[</span><span class="token punctuation">]</span>: Is the information correct? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> Y</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>useradd 虽然需要记住一些选项和考量一些细节，但其功能强大，并且更适合批量脚本操作。</p><p>adduser 虽然使用简单，但其交互式的特性注定其无法用于批量管理，并且无法深度自定义创建用户的其他参数。</p><p>日常使用中，其实只要使用下面这条命令就能应对大部分的使用场景。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">useradd</span> <span class="token parameter variable">--groups</span> wheel --create-home <span class="token parameter variable">--shell</span> /bin/bash <span class="token operator">&lt;</span>用户名<span class="token operator">></span></code></pre><div class="note info flat"><p>有些 Linux 发行版没有 <code>wheel</code> 用户组，取而代之的是 <code>sudo</code> 用户组。<br>请注意根据 Linux 发行版的不同，自行替换。</p></div>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH 优化</title>
      <link href="/SSH-Optimization/"/>
      <url>/SSH-Optimization/</url>
      
        <content type="html"><![CDATA[<p>本文介绍如何优化 SSH 相关配置以提升安全性和日常使用体验。</p><h2 id="更改-SSH-端口"><a href="#更改-SSH-端口" class="headerlink" title="更改 SSH 端口"></a>更改 SSH 端口</h2><p>默认 SSH 端口为22，容易被批量 SSH 恶意登录尝试波及，可更改为其它未被占用端口。</p><p>修改 <code>/etc/ssh/sshd_config</code> 以更改 SSH 端口</p><pre class="language-textile" data-language="textile"><code class="language-textile"><span class="token phrase">Port &lt;端口></span></code></pre><img src="/SSH-Optimization/1D3EBAE5934510EA0B0A4BDAAC39DEE5.webp" class="" title="更改 SSH 端口"><p>重启 SSHD 服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl restart sshd</code></pre><h2 id="禁止-Root-用户登录"><a href="#禁止-Root-用户登录" class="headerlink" title="禁止 Root 用户登录"></a>禁止 Root 用户登录</h2><p>既然禁止 Root 用户登录，那么首先应该创建一个新用户用于登录和管理服务器。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> --create-home <span class="token parameter variable">--shell</span> /bin/bash <span class="token parameter variable">--groups</span> <span class="token function">sudo</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span></code></pre><div class="note warning flat"><p>有些 Linux 发行版没有 <code>sudo</code> 用户组，取而代之的是 <code>wheel</code> 用户组。</p></div><div class="note default flat"><p><code>useradd</code> 命令在不同 Linux 发行版可能有着不同的行为。详情请见<a href="https://hydrotho.github.io/Learn-More-About-Useradd-Command/">这篇博文</a>。</p></div><p>设置新用户密码</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span></code></pre><p>修改 <code>/etc/ssh/sshd_config</code> 以禁止 Root 用户登录</p><pre class="language-textile" data-language="textile"><code class="language-textile"><span class="token phrase">PermitRootLogin no</span></code></pre><img src="/SSH-Optimization/9C5F49B1B70304DDEB1A676B173053AB.webp" class="" title="禁止 Root 用户登录"><p>重启 SSHD 服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl restart sshd</code></pre><h2 id="开启-SSH-KEY-登录"><a href="#开启-SSH-KEY-登录" class="headerlink" title="开启 SSH-KEY 登录"></a>开启 SSH-KEY 登录</h2><p>生成密钥对（输入命令后一直回车即可）</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> ed25519</code></pre><div class="note warning flat"><p>请在本地计算机生成密钥对，保管好私钥。</p></div><div class="note info flat"><p>Ed25519 在保证安全性的同时，密钥长度比 RSA 短很多。Ed25519 的安全性相当于 3072 位的 RSA。</p></div><p>上传公钥到服务器</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-copy-id <span class="token parameter variable">-i</span> ~/.ssh/id_ed25519.pub <span class="token operator">&lt;</span>用户名<span class="token operator">></span>@<span class="token operator">&lt;</span>服务器 IP<span class="token operator">></span></code></pre><div class="note danger flat"><p>请登出服务器使用新创建的用户再次登录服务器，此时应该无需提供密码，SSH 自动使用私钥登录服务器。</p><p>若已成功使用私钥登录服务器，即可进行后续步骤。</p></div><p>修改 <code>/etc/ssh/sshd_config</code> 以禁止使用密码登录</p><pre class="language-textile" data-language="textile"><code class="language-textile"><span class="token phrase">PasswordAuthentication no</span></code></pre><img src="/SSH-Optimization/5E0EACAA0CB9CFBD8D43D39D01197E19.webp" class="" title="禁止使用密码登录"><p>重启 SSHD 服务</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart sshd</code></pre><h2 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h2><p>平常使用 ssh 命令时，总要输入一长串参数，而设置别名后，诸如 <code>ssh -p &lt;端口&gt; &lt;用户名&gt;@&lt;服务器 IP&gt;</code> 就可以用 <code>ssh &lt;别名&gt;</code> 替代。</p><p>设置别名可通过修改本地计算机以下文件之一实现：</p><ul><li><p><code>/etc/ssh/ssh_config</code> 应用于全局</p></li><li><p><code>~/.ssh/config</code> 仅应用于当前用户</p></li></ul><div class="note info flat"><p><code>~</code> 代表当前用户的家目录。</p></div><p>创建 <code>~/.ssh/config</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> ~/.ssh/config</code></pre><p>在 <code>~/.ssh/config</code> 中添加以下内容：</p><pre class="language-textile" data-language="textile"><code class="language-textile"><span class="token phrase">Host    &lt;别名>    HostName        &lt;服务器 IP>    Port            &lt;服务器 SSH 端口>    User            &lt;用户名>    IdentityFile    ~/.ssh/id_ed25519    IdentitiesOnly  yes</span></code></pre><p>此时已可通过 <code>ssh &lt;别名&gt;</code> 登录服务器。</p><h2 id="避免-SSH-连接自动断开"><a href="#避免-SSH-连接自动断开" class="headerlink" title="避免 SSH 连接自动断开"></a>避免 SSH 连接自动断开</h2><p>在 <code>~/.ssh/config</code> 中添加以下内容：</p><pre class="language-textile" data-language="textile"><code class="language-textile"><span class="token phrase">Host    *    ServerAliveCountMax 5    ServerAliveInterval 100</span></code></pre><div class="note info flat"><p><code>ServerAliveCountMax</code> 和 <code>ServerAliveInterval</code> 后的数值可根据自身体验适当调节。</p></div>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 安装第三方主题</title>
      <link href="/Windows-10-Themes/"/>
      <url>/Windows-10-Themes/</url>
      
        <content type="html"><![CDATA[<p>本文介绍如何在 Windows 系统上使用 UltraUXThemePatcher 或 SecureUxTheme 安装第三方主题。</p><h2 id="为何折腾第三方主题"><a href="#为何折腾第三方主题" class="headerlink" title="为何折腾第三方主题"></a>为何折腾第三方主题</h2><p>首先，你可能会有些疑问：Windows 10 不是可以在设置 ⇨ 个性化 ⇨ 主题中设置自己想要的个性化主题吗？何必大费周章地破解系统去安装第三方主题。</p><img src="/Windows-10-Themes/3D779BC8BE45033F2CD0342FA79AD429.webp" class="" title="Windows 10 官方主题设置"><p>然而官方主题所能做的仅仅只是更换壁纸、系统主题色、系统提示音和鼠标光标样式。若你满足于此，那确实不必折腾，但你要想摆脱这千篇一律的官方主题，那么安装第三方主题就是你所追寻的。</p><p>一款好的 Windows 主题应该拥有符合当今潮流的人性化的 UI 设计，最好还具有一定的灵活度，可自行定制一些元素,对很多软件进行渲染，实现整体视觉统一。</p><img src="/Windows-10-Themes/F5B67D9BD0F8B443CF34E2EAF3A2A49A.webp" class="" title="Simplify 10 Light"><img src="/Windows-10-Themes/A416085A20F2147AD9DE4807FB2E24C4.webp" class="" title="Simplify 10 Dark"><img src="/Windows-10-Themes/8DB01287EB3E54D6F914E34DC413764E.webp" class="" title="Nord Windows 10 Theme"><p>你可以在 <a href="https://www.deviantart.com/">DeviantArt</a> 搜索诸如 Windows, Theme, VisualStyle 之类的关键词找到心仪的主题。</p><h2 id="使用-UltraUXThemePatcher-安装第三方主题"><a href="#使用-UltraUXThemePatcher-安装第三方主题" class="headerlink" title="使用 UltraUXThemePatcher 安装第三方主题"></a>使用 UltraUXThemePatcher 安装第三方主题</h2><div class="note danger flat"><p>请先<a href="https://support.microsoft.com/zh-cn/windows/%E5%88%9B%E5%BB%BA%E7%B3%BB%E7%BB%9F%E8%BF%98%E5%8E%9F%E7%82%B9-77e02e2a-3298-c869-9974-ef5658ea3be9">创建系统还原点</a>，以防万一。</p></div><h3 id="安装-UltraUXThemePatcher"><a href="#安装-UltraUXThemePatcher" class="headerlink" title="安装 UltraUXThemePatcher"></a>安装 UltraUXThemePatcher</h3><p>首先下载 <a href="https://mhoefs.eu/software_uxtheme.php?lang=en">UltraUXThemePatcher</a>，安装后重启系统，然后再次运行该软件。如果显示 <code>Patched</code> ，则安装成功。</p><p>UltraUXThemePatcher 在安装时将自动备份原始系统文件，并在卸载时恢复原始系统文件来撤销对系统的修改。</p><img src="/Windows-10-Themes/C19D64E3FAD8D2450544F756FAABC34A.webp" class="" title="安装 UltraUXThemePatcher"><div class="note warning flat"><p>在 <code>Windows 10 Creators Update</code> 之后，UltraUXThemePatcher 可能无法获取安装所需的权限，导致安装失败。</p><ul><li><code>C:\Windows\System32\uxtheme.dll</code></li><li><code>C:\Windows\System32\uxinit.dll</code></li><li><code>C:\Windows\System32\themeui.dll</code></li></ul><p>目前唯一的解决方法是以 <code>Administrator</code> 登录，更改文件所有者并获取完全控制权限。</p></div><div class="note info flat"><p>当你遇到其他问题时，可尝试运行</p><pre class="language-textile" data-language="textile"><code class="language-textile"><span class="token phrase"><span class="token block-tag"><span class="token tag">sfc</span><span class="token punctuation">.</span></span>exe /scannow</span></code></pre><p>若问题依旧存在，可查看<a href="https://mhoefs.eu/software_uxtheme.php?lang=en#:~:text=FAQ">官方文档</a>。</p></div><h3 id="UltraUXThemePatcher-安装第三方主题"><a href="#UltraUXThemePatcher-安装第三方主题" class="headerlink" title="UltraUXThemePatcher 安装第三方主题"></a>UltraUXThemePatcher 安装第三方主题</h3><p>下载 <a href="https://www.deviantart.com/niivu/art/cakeOS-760118003">cakeOS</a></p><img src="/Windows-10-Themes/4D58591A5266E73EAFADA5A1E2857426.webp" class="" title="cakeOS"><p>将主题文件放入 <code>C:\Windows\Resources\Themes</code></p><img src="/Windows-10-Themes/6F0A15A8F2D22E031A6039157598ED21.webp" class="" title="安装主题"><p>正确放置主题文件后就可以在设置 ⇨ 个性化 ⇨ 主题中选择第三方主题并应用。</p><div class="note warning flat"><p>Windows 10 从注册表加载默认主题色，这可能导致暗色主题出错。<br><code>[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\DefaultColors]</code></p><p>请以管理员身份运行 PowerShell，并执行以下命令</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Remove-Item</span> <span class="token operator">-</span>Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\DefaultColors<span class="token function">New-Item</span> <span class="token operator">-</span>Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes <span class="token operator">-</span>Name DefaultColors<span class="token function">New-Item</span> <span class="token operator">-</span>Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\DefaultColors <span class="token operator">-</span>Name HighContrast<span class="token function">New-Item</span> <span class="token operator">-</span>Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\DefaultColors <span class="token operator">-</span>Name Standard<span class="token function">New-ItemProperty</span> <span class="token operator">-</span>Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\DefaultColors\HighContrast <span class="token operator">-</span>Name HotTrackingColor <span class="token operator">-</span>PropertyType DWord <span class="token operator">-</span>Value 0x0000ffff<span class="token function">New-ItemProperty</span> <span class="token operator">-</span>Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\DefaultColors\HighContrast <span class="token operator">-</span>Name Standard <span class="token operator">-</span>PropertyType DWord <span class="token operator">-</span>Value 0x00cc6600</code></pre><p>若你发现 <code>Excel</code> 或者 <code>PowerPoint</code> 的暗色主题出现问题，请参考 <a href="https://github.com/matafokka/ExcelDarkThemeFix">ExcelDarkThemeFix</a> 和 <a href="https://github.com/matafokka/PowerPointDarkThemeFix">PowerPointDarkThemeFix</a>。</p></div><div class="note info flat"><p>cakeOS 还提供了与主题配套的图标和鼠标光标：</p><ul><li><a href="https://www.deviantart.com/niivu/art/cakeOS-colors-iPACKS-763247122">cakeOS colors Icon Theme</a></li><li><a href="https://www.deviantart.com/niivu/art/cakeOS-Cursors-760664795">cakeOS Cursors</a></li></ul></div><h2 id="使用-SecureUxTheme-安装第三方主题"><a href="#使用-SecureUxTheme-安装第三方主题" class="headerlink" title="使用 SecureUxTheme 安装第三方主题"></a>使用 SecureUxTheme 安装第三方主题</h2><div class="note danger flat"><p>请先<a href="https://support.microsoft.com/zh-cn/windows/%E5%88%9B%E5%BB%BA%E7%B3%BB%E7%BB%9F%E8%BF%98%E5%8E%9F%E7%82%B9-77e02e2a-3298-c869-9974-ef5658ea3be9">创建系统还原点</a>，以防万一。</p></div><p>SecureUxTheme 相较于 UltraUXThemePatcher 不需要修改系统文件就能实现安装第三方主题。</p><h3 id="安装-SecureUxTheme"><a href="#安装-SecureUxTheme" class="headerlink" title="安装 SecureUxTheme"></a>安装 SecureUxTheme</h3><p>下载 <a href="https://github.com/namazso/SecureUxTheme/releases/latest/download/ThemeTool.exe">SecureUxTheme</a>，以管理员身份运行 SecureUxTheme，点击 <code>Install</code> 即可。</p><img src="/Windows-10-Themes/7E87D8FAF7D64360D2590762F78229C9.webp" class="" title="安装 SecureUxTheme"><div class="note info flat"><p>若你遇到问题，可查看<a href="https://github.com/namazso/SecureUxTheme/wiki/Help:-Login-loop-after-installing-SecureUxTheme">安装 SecureUxTheme 后无限重启</a>。</p></div><h3 id="SecureUxTheme-安装第三方主题"><a href="#SecureUxTheme-安装第三方主题" class="headerlink" title="SecureUxTheme 安装第三方主题"></a>SecureUxTheme 安装第三方主题</h3><p>下载 <a href="https://www.deviantart.com/niivu/art/cakeOS-760118003">cakeOS</a></p><img src="/Windows-10-Themes/4D58591A5266E73EAFADA5A1E2857426.webp" class="" title="cakeOS"><p>将主题文件放入 <code>C:\Windows\Resources\Themes</code></p><img src="/Windows-10-Themes/6F0A15A8F2D22E031A6039157598ED21.webp" class="" title="安装主题"><p>正确放置主题文件后，再次以管理员身份运行 SecureUxTheme，选择想要安装的主题并点击 <code>Patch and apply</code> 即可。</p><div class="note info flat"><p>若你遇到问题，可查看<a href="https://github.com/namazso/SecureUxTheme/wiki/Help:-Login-loop-after-setting-a-theme">安装第三方主题后无限重启</a>。</p></div><div class="note default flat"><p>关于暗色主题出错的问题与 cakeOS 配套的图标和鼠标光标，请参考<a href="https://hydrotho.github.io/Windows-10-Themes/#UltraUXThemePatcher-%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E4%B8%BB%E9%A2%98">上文</a>。</p></div><h2 id="删除资源管理器功能区菜单"><a href="#删除资源管理器功能区菜单" class="headerlink" title="删除资源管理器功能区菜单"></a>删除资源管理器功能区菜单</h2><p>下载 <a href="https://tihiy.net/files/OldNewExplorer.rar">OldNewExplorer</a>，并按照下图所示，勾选对应选项再点击 <code>Install</code> 即可。</p><img src="/Windows-10-Themes/95825D4A6DB08C2310FCCCB17097DF1E.webp" class="" title="安装 OldNewExplorer"><div class="note info flat"><p>如果你是 Windows 11 用户，你可能需要 <a href="https://www.startallback.com/">StartAllBack</a> 或者免费开源的 <a href="https://github.com/valinet/ExplorerPatcher">ExplorerPatcher</a>。</p></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>推荐优先使用 SecureUxTheme，但无论你选择 UltraUXThemePatcher 还是 SecureUxTheme 都请事先<a href="https://support.microsoft.com/zh-cn/windows/%E5%88%9B%E5%BB%BA%E7%B3%BB%E7%BB%9F%E8%BF%98%E5%8E%9F%E7%82%B9-77e02e2a-3298-c869-9974-ef5658ea3be9">创建系统还原点</a>，以防万一。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Miniflux 自建 RSS</title>
      <link href="/Miniflux-Build-Guide/"/>
      <url>/Miniflux-Build-Guide/</url>
      
        <content type="html"><![CDATA[<p>本文介绍如何使用 Miniflux 搭建属于自己的 RSS 服务。</p><p>RSS 是一种消息来源格式规范，用以聚合多个网站更新的内容并自动通知网站订阅者。使用 RSS 后，网站订阅者便无需再手动查看网站是否有新的内容，同时 RSS 可将多个网站更新的内容进行整合，以摘要的形式呈现，有助于订阅者快速获取重要信息，并选择性地点阅查看。</p><div class="note primary flat"><p>本教程基于 Debian 11 系统且不直接使用 root 用户。如果你对使用 SSH 连接服务器和创建新用户有疑惑的话，请参考<a href="https://hydrotho.github.io/SSH-Optimization/">这篇博文</a>。</p></div><h2 id="与-Tiny-Tiny-RSS-对比"><a href="#与-Tiny-Tiny-RSS-对比" class="headerlink" title="与 Tiny Tiny RSS 对比"></a>与 Tiny Tiny RSS 对比</h2><div class="note info flat"><p>Miniflux 和 Tiny Tiny RSS 是两个优秀的免费开源 RSS 聚合阅读器。</p></div><p>虽然 Tiny Tiny RSS 比较成熟，可是基于 PHP 编写的 Tiny Tiny RSS，实在太「重」。如果你感兴趣的话，推荐尝试 <a href="https://ttrss.henry.wang/zh/">Awesome TTRSS</a> 这个项目，Awesome TTRSS 旨在提供一个 <strong>「一站式容器化」</strong> 的 Tiny Tiny RSS 解决方案，通过提供简易的部署方式以及一些额外插件，以提升用户体验。</p><p>Miniflux 是基于 GO 编写的，程序设计极简，无外部依赖，功能却丝毫不差。</p><h2 id="安装-Miniflux"><a href="#安装-Miniflux" class="headerlink" title="安装 Miniflux"></a>安装 Miniflux</h2><h3 id="更新-Debian-系统"><a href="#更新-Debian-系统" class="headerlink" title="更新 Debian 系统"></a>更新 Debian 系统</h3><div class="note danger flat"><p>为防止遇到无法拉取 HTTPS 源的情况，先运行以下命令:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> apt-transport-https ca-certificates</code></pre><p>你可根据机器的网络环境，自行判断是否手动更改 APT 源。</p></div><p>更改 APT 源</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tee</span> /etc/apt/sources.list <span class="token operator">&lt;&lt;</span> <span class="token string">EOFdeb https://opentuna.cn/debian/ bullseye main contrib non-free# deb-src https://opentuna.cn/debian/ bullseye main contrib non-freedeb https://opentuna.cn/debian/ bullseye-updates main contrib non-free# deb-src https://opentuna.cn/debian/ bullseye-updates main contrib non-freedeb https://opentuna.cn/debian/ bullseye-backports main contrib non-free# deb-src https://opentuna.cn/debian/ bullseye-backports main contrib non-freedeb https://opentuna.cn/debian-security bullseye-security main contrib non-free# deb-src https://opentuna.cn/debian-security bullseye-security main contrib non-freeEOF</span></code></pre><p>更新系统</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade</code></pre><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>安装 Docker 所必需的前置包</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ca-certificates <span class="token function">curl</span> gnupg lsb-release</code></pre><p>添加 Docker 官方的 GPG 密钥</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/debian/gpg <span class="token punctuation">\</span>    <span class="token operator">|</span> <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg</code></pre><p>添加 Docker 稳定版仓库</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>    <span class="token string">"deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \    https://download.docker.com/linux/debian <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span> <span class="token punctuation">\</span>    <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">></span> /dev/null</code></pre><p>安装 Docker Engine</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io</code></pre><p>添加当前用户至 Docker 用户组</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token environment constant">$USER</span></code></pre><h3 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h3><div class="note info flat"><p>Compose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。</p></div><div class="note warning flat"><p>请注意将下面命令中的 <code>v2.2.2</code> 替换为 Docker Compose 的<a href="https://github.com/docker/compose/releases/latest">最新版本</a>。</p></div><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-o</span> /usr/libexec/docker/cli-plugins/docker-compose<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/libexec/docker/cli-plugins/docker-compose</code></pre><h3 id="使用-Docker-Compose-安装-Miniflux"><a href="#使用-Docker-Compose-安装-Miniflux" class="headerlink" title="使用 Docker Compose 安装 Miniflux"></a>使用 Docker Compose 安装 Miniflux</h3><p>创建 <code>~/miniflux</code> 目录</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/miniflux <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> ~/miniflux</code></pre><p>创建 <code>docker-compose.yml</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> docker-compose.yml</code></pre><p>修改 <code>docker-compose.yml</code> 文件内容</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.4'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">miniflux</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'miniflux/miniflux:latest'</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'&lt;端口>:8080'</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> db    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'DATABASE_URL=postgres://miniflux:&lt;密码>@db/miniflux?sslmode=disable'</span>      <span class="token punctuation">-</span> RUN_MIGRATIONS=1      <span class="token punctuation">-</span> CREATE_ADMIN=1      <span class="token punctuation">-</span> ADMIN_USERNAME=&lt;管理员用户名<span class="token punctuation">></span>      <span class="token punctuation">-</span> ADMIN_PASSWORD=&lt;管理员密码<span class="token punctuation">></span>    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> CMD        <span class="token punctuation">-</span> /usr/bin/miniflux        <span class="token punctuation">-</span> <span class="token string">'-healthcheck'</span>        <span class="token punctuation">-</span> auto  <span class="token key atrule">db</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'postgres:latest'</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> POSTGRES_USER=miniflux      <span class="token punctuation">-</span> POSTGRES_PASSWORD=&lt;密码<span class="token punctuation">></span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'miniflux-db:/var/lib/postgresql/data'</span>    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> CMD        <span class="token punctuation">-</span> pg_isready        <span class="token punctuation">-</span> <span class="token string">'-U'</span>        <span class="token punctuation">-</span> miniflux      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 10s      <span class="token key atrule">start_period</span><span class="token punctuation">:</span> 30s<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">miniflux-db</span><span class="token punctuation">:</span> <span class="token null important">null</span></code></pre><p>测试 Miniflux</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span></code></pre><p>此时浏览器输入 <code>IP:&lt;端口&gt;</code> 应该已经可以访问 Miniflux。如无法访问，请检查服务器的防火墙设置。</p><img src="/Miniflux-Build-Guide/07A1224D990F0963A4A754511E6580DC.webp" class="" title="Miniflux 主界面"><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><p>安装 Nginx 所必需的前置包</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">curl</span> gnupg2 ca-certificates lsb-release debian-archive-keyring</code></pre><p>添加 Nginx 官方的 GPG 密钥</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://nginx.org/keys/nginx_signing.key <span class="token operator">|</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token punctuation">\</span>    <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /usr/share/keyrings/nginx-archive-keyring.gpg <span class="token operator">></span> /dev/null</code></pre><p>添加 Nginx 稳定版仓库</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>    <span class="token string">"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \    http://nginx.org/packages/debian <span class="token variable"><span class="token variable">`</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">`</span></span> nginx"</span> <span class="token punctuation">\</span>    <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/nginx.list</code></pre><p>安装 Nginx</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nginx</code></pre><h3 id="申请-SSL-证书"><a href="#申请-SSL-证书" class="headerlink" title="申请 SSL 证书"></a>申请 SSL 证书</h3><p>安装 <code>acme.sh</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://get.acme.sh <span class="token operator">|</span> <span class="token function">sh</span> <span class="token parameter variable">-s</span> <span class="token assign-left variable">email</span><span class="token operator">=</span><span class="token operator">&lt;</span>邮箱<span class="token operator">></span></code></pre><p>开启 <code>acme.sh</code> 自动更新</p><pre class="language-bash" data-language="bash"><code class="language-bash">acme.sh <span class="token parameter variable">--upgrade</span> --auto-upgrade</code></pre><p>申请 SSL 证书</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> acme.sh <span class="token parameter variable">--issue</span> <span class="token parameter variable">--nginx</span> <span class="token parameter variable">--keylength</span> ec-256 <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>域名<span class="token operator">></span></code></pre><p>安装 SSL 证书</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> /etc/nginx/ssl<span class="token function">sudo</span> acme.sh --install-cert <span class="token parameter variable">--ecc</span> <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>域名<span class="token operator">></span> <span class="token punctuation">\</span>    --key-file          /etc/nginx/ssl/privkey.pem <span class="token punctuation">\</span>    --ca-file           /etc/nginx/ssl/chain.pem <span class="token punctuation">\</span>    --fullchain-file    /etc/nginx/ssl/fullchain.pem <span class="token punctuation">\</span>    <span class="token parameter variable">--reloadcmd</span> <span class="token string">"service nginx force-reload"</span></code></pre><h3 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h3><p>获取 <code>dhparam.pem</code> 文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> openssl dhparam <span class="token parameter variable">-out</span> /etc/nginx/ssl/dhparam.pem <span class="token number">2048</span></code></pre><p>创建配置文件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">touch</span> /etc/nginx/conf.d/miniflux.conf</code></pre><p>修改配置文件</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span> default_server</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">listen</span> [::]:80 default_server</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">return</span> <span class="token number">301</span> https://<span class="token variable">$host</span><span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl http2</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">listen</span> [::]:443 ssl http2</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> &lt;域名>    location /</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:&lt;端口></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_redirect</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token directive"><span class="token keyword">ssl_certificate</span> /etc/nginx/ssl/fullchain.pem</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_certificate_key</span> /etc/nginx/ssl/privkey.pem</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_session_timeout</span> <span class="token number">1d</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_session_cache</span> shared:MozSSL:10m</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_session_tickets</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_dhparam</span> /etc/nginx/ssl/dhparam.pem</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_protocols</span> TLSv1.2 TLSv1.3</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_ciphers</span> ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">add_header</span> Strict-Transport-Security <span class="token string">"max-age=63072000"</span> always</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_stapling</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_stapling_verify</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_trusted_certificate</span> /etc/nginx/ssl/chain.pem</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">resolver</span> 1.1.1.1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>启动 Nginx</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start nginx</code></pre><p>此时应该已可以通过域名访问 Miniflux。如无法访问，请检查服务器的防火墙设置。</p><h2 id="使用-Miniflux"><a href="#使用-Miniflux" class="headerlink" title="使用 Miniflux"></a>使用 Miniflux</h2><h3 id="网页端"><a href="#网页端" class="headerlink" title="网页端"></a>网页端</h3><p>登录后，可在 Settings 中更改语言为简体中文，还可以修改时区和主题。</p><img src="/Miniflux-Build-Guide/EF04EB34CDC9EAE9AC69D2BEDBB4FEE5.webp" class="" title="Miniflux 设置界面"><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>在设置 ⇨ 集成中，开启 Fever 并设置 Fever 用户名和 Fever 密码。建议搭配 <a href="https://play.google.com/store/apps/details?id=com.seazon.feedme">FeedMe</a> (Android) 或 <a href="https://reederapp.com/">Reeder</a> (Apple) 使用。</p><img src="/Miniflux-Build-Guide/FB5D870B188EDA39EFABD3DB68EEC72B.webp" class="" title="开启 Fever API"><h3 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h3><ul><li><p><a href="https://miniflux.app/docs/rules.html#filtering-rules">过滤规则</a>：最基础的 RSS 功能，可以过滤「垃圾」信息。</p></li><li><p><a href="https://miniflux.app/docs/rules.html#rewrite-rules">重写规则</a>：Miniflux 允许通过添加重写规则来实现诸如在图片下方添加图片标题，抑或是添加视频播放器。</p></li><li><p><a href="https://miniflux.app/docs/rules.html#scraper-rules">剔除规则</a>：当 RSS 源仅提供文章摘要时，我们可以通过获取原始内容再搭配剔除规则的方式来抓取文章全部内容。</p></li></ul><h2 id="RSSHub-万物皆可-RSS"><a href="#RSSHub-万物皆可-RSS" class="headerlink" title="RSSHub - 万物皆可 RSS"></a>RSSHub - 万物皆可 RSS</h2><div class="note info flat"><p>RSSHub 是一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。RSSHub 借助于开源社区的力量快速发展中，目前已适配数百家网站的上千项内容。</p><p>RSSHub 可以配合浏览器扩展 <a href="https://github.com/DIYgod/RSSHub-Radar">RSSHub Radar</a> 和 移动端辅助 App <a href="https://github.com/Cay-Zhang/RSSBud">RSSBud</a> (iOS) 与 <a href="https://github.com/LeetaoGoooo/RSSAid">RSSAid</a> (Android) 食用。</p></div><p>除了 RSS 阅读器之外，RSS 订阅源更是重中之重。然而，很多内容提供者 (包括但不仅限于微信公众号) 并不提供 RSS，但我们可以使用 RSSHub 来获取 RSS 订阅链接。</p><p>RSSHub 具体使用方法请参考<a href="https://docs.rsshub.app/">官方文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
